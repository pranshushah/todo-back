{"version":3,"sources":["component/Todo/AddDueDate/AddDueDate.module.scss","component/UI/Header/Header.module.scss","component/TasksContainer/TaskContainer.module.scss","component/UI/Modal/Backdrop/Backdrop.module.scss","component/StepDetails/StepDetails.module.scss","component/MydayContainer/MyDayContainer.module.scss","component/PlannedContainer/PlannedContainer.module.scss","component/ImportantContainer/ImportantContainer.module.scss","component/LeftSidebar/LeftSidebar.module.scss","asset/logo.png","asset/welcome-center.png","component/UI/GoogleButton/GoogleButton.js","component/UI/TwitterButton/TwitterButton.js","component/Home/Home.js","component/Loading/Loading.js","atoms/loginDetailsAtom.tsx","selector/loginStatus.tsx","atoms/NormalTaskAtom.tsx","atoms/plannedTasksState.tsx","atoms/MyDayTaskAtom.tsx","atoms/ImportantTaskAtom.tsx","atoms/allProjectAtom.tsx","atoms/todoInProjects.tsx","axios.ts","atoms/NotificationAtom.tsx","utils/customHooks/useAddNotification.tsx","utils/svg/plus.svg","utils/svg/circle.svg","component/UI/Input/Input.tsx","component/AddTodo/AddTodo.tsx","component/UI/Header/Header.tsx","atoms/selectedTodoAtom.tsx","component/Todo/CloseButton/CloseButton.tsx","selector/allTodos.tsx","utils/helperFunction/updateLists.ts","utils/customHooks/useSetAllTask.tsx","utils/customHooks/useUpdateTaskFromTaskDetails.tsx","utils/helperFunction/timeoutMessage.ts","component/Todo/myDayBox/myDayBox.tsx","component/UI/CheckBox/CheckBox.tsx","component/Todo/AddStep/AddStep.tsx","component/UI/Tooltip/Tooltip.tsx","component/UI/Button/Button.tsx","component/UI/Modal/Backdrop/Backdrop.tsx","component/UI/Modal/Modal.tsx","component/Todo/StepItem/StepItem.tsx","component/Todo/TodoBox/TodoBox.tsx","utils/customHooks/useSetTask.tsx","utils/customHooks/useSetAddTasksInFront.tsx","component/Todo/ButtonContainer/ButtonContainer.tsx","utils/customHooks/useDeleteTaskInFront.tsx","utils/helperFunction/getDateString.ts","component/Todo/AddDueDate/AddDueDate.tsx","component/Todo/DueDate/DueDate.tsx","component/Todo/Todo.tsx","selector/selectedTodoStatus.tsx","selector/normalTasksMapper.tsx","component/Daydisplay/Daydisplay.tsx","component/StepDetails/StepDetails.tsx","component/TaskItem/TaskItem.tsx","component/UI/Accordion/Accordion.tsx","component/TasksContainer/TaskContainer.tsx","selector/myDayTaskMapper.tsx","component/MydayContainer/MydayContainer.tsx","selector/plannedTaskMapper.tsx","component/PlannedContainer/TodoList/TododList.tsx","component/PlannedContainer/PlannedContainer.tsx","selector/impTasksMapper.tsx","component/ImportantContainer/ImportantContainer.tsx","utils/svg/plusPurple.svg","utils/svg/plusGrey.svg","component/AddProject/AddProject.tsx","utils/svg/list-bullet.svg","selector/getTaskByProject.tsx","component/AddProject/ProjectList/ProjectItem/ProjectItem.tsx","component/AddProject/ProjectList/ProjectList.tsx","component/LeftSidebar/LeftSidebar.tsx","component/UI/NotificationList/NotificationList.tsx","component/ProjectContainer/TodoList/TodoList.tsx","component/ProjectContainer/CompletedTodoList/CompletedTodoList.tsx","utils/svg/dots-horizontal.svg","component/ProjectContainer/ProjectMenu/ProjectMenu.tsx","component/ProjectContainer/ProjectTitle.tsx","component/ProjectContainer/ProjectContainer.tsx","App.tsx","utils/customHooks/useSetTaskOnload.tsx","index.tsx","component/UI/Input/Input.module.scss","component/UI/Button/Button.module.scss","component/TaskItem/TaskItem.module.scss","component/AddTodo/AddTodo.module.scss","component/Todo/AddStep/AddStep.module.scss","component/UI/Accordion/Accordion.module.scss","component/Todo/myDayBox/myDayBox.module.scss","component/Todo/DueDate/DueDate.module.scss","component/Todo/TodoBox/TodoBox.module.scss","component/UI/Modal/Modal.module.scss","component/Daydisplay/Daydisplay.module.scss","component/AddProject/ProjectList/ProjectItem/ProjectItem.module.scss","component/UI/NotificationList/NotificationModule.module.scss","component/ProjectContainer/ProjectContainer.module.scss","component/Home/Home.module.scss","component/ProjectContainer/ProjectMenu/ProjectMenu.module.scss","component/Loading/Loading.module.scss","component/UI/CheckBox/CheckBox.module.scss","component/Todo/StepItem/StepItem.module.scss","component/AddProject/AddProject.module.scss","component/UI/GoogleButton/GoogleButton.module.scss","component/UI/TwitterButton/TwitterButton.module.scss","component/Todo/TodoContainer.module.scss","component/Todo/CloseButton/CloseButton.module.scss","component/UI/Tooltip/Tooltip.module.scss","component/Todo/ButtonContainer/ButtonContainer.module.scss"],"names":["module","exports","GoogleButton","props","a","href","whileTap","scale","className","Styles","google","btn","join","icon","faGoogle","style","marginRight","TwitterButton","twitter","faTwitter","Home","container","logo","src","alt","heading","banner","Banner","Loading","Logo","loader","loginDetailsState","atom","key","default","loginState","selector","get","normalTasksState","planbedTasksState","myDayState","ImpTasksState","projects","projectTasksAtom","instance","axios","create","timeout","timeoutErrorMessage","notificationAtom","useSetNotification","setNotificationList","useSetRecoilState","removeNotifcation","id","notificationList","produce","draft","splice","findIndex","notifitcation","addNotification","message","type","v4","notficationList","push","setTimeout","Input","ref","addProject","addStep","addTodo","stepInput","doneStepInput","todoInDetails","projectTitle","classes","addInput","addStepInput","stepInputText","inputDoneText","todoDetailInput","addTodoInput","React","forwardRef","AddTodo","onAddTodo","placeholder","useState","textFocus","setTextFocus","inputText","setInputText","addTodoHandler","trim","containerFocused","plusContainer","circle","plus","input","onFocus","onBlur","value","onChange","e","target","onKeyUp","length","addButton","onClick","Header","displayTitle","headingHeader","selectedTodo","CloseButton","bigger","button","bigButton","closeButton","stopPropagation","allTodos","normalTodos","projectTodos","set","updatedValue","DefaultValue","impTodos","plannedTodos","myDayTodos","updatLists","todoList","newTodo","ops","replaceIndex","todo","deleteIndex","useSetAllTask","normalTasks","useRecoilValue","plannedTasks","impTasks","mydayTasks","todoInProject","setAllTasks","useRecoilState","selectedtodo","setTodo","updater","normalTask","projectId","dueDate","important","myDay","useSetTaskFromTaskDetails","updateAllTasks","updateTodo","from","createdAt","Date","endOfDay","undefined","timeMessageObjCreate","MyDayBox","updateTaskFromDetails","oldTodo","window","navigator","onLine","patch","todoId","status","Error","mydayContainer","mydayTextContainer","faSun","mydayText","activeText","buttonContainer","CheckBox","small","Math","random","toString","inputCheckBox","htmlFor","smallCheckBox","checkBox","post","stepTitle","res","data","onKeyPress","Tooltip","el","children","render","showTooltip","setShowTooltip","xcord","setXcord","ycord","setYcord","document","querySelector","createElement","body","appendChild","varaints","initial","opacity","animate","onMouseMove","pageX","pageY","onMouseLeave","createPortal","div","variants","position","left","top","tooltipContainer","arrow","Button","dimension","secondary","primary","danger","huge","large","medium","BackDrop","show","exit","visible","transition","when","duration","delayChildren","hidden","delay","backdrop","Modal","title","modalConfirmed","modalClosed","deleteButtonTitle","dialog","open","y","contentContainer","text","action","StepItem","step","inputRef","useRef","taskTitle","setStepInput","modalToggle","setModalToggle","newStauts","stepIndex","steps","stepId","done","currentStep","newStatus","newStepTitle","updateNewStepTitle","todoTitleChangeHandler","checkboxContainer","checked","stepDoneStatusChangeHandler","current","blur","TodoBox","todoTitle","todoInputValue","setTodoInputValue","newTodoTitle","impStatusChangeHandler","todoImpStatusChangeHandler","useEffect","map","index","textContainer","todoDoneStatusChangeHandler","SolidStar","impFilled","faStar","imp","AddStep","useSetTasks","recoilState","setTodoList","operation","useSetAddTaskInFront","updateNormaTasks","updatePlannedTasks","updateImpTasks","updateMydayTasks","updateTodoInProject","ButtonContainer","deleteTaskFromAll","useDeleteTaskInFront","showModal","setShowModal","addTaskToAll","deleteButtonContainer","getDateString","date","isFuture","isToday","isTomorrow","isThisYear","format","isYesterday","CustomInput","DueDatePicker","changeHandler","selected","customInput","minDate","DueDate","dateContainer","Todo","variant","x","section","close","selctedTodo","normalTasksMapper","selectorFamily","tasks","filter","task","Daydisplay","completed","isPast","due","overDue","dueToday","faCalendar","paddingRight","StepDetails","totalDone","forEach","TaskItem","setSelctedTodo","givenProject","find","project","updateTodoDoneStatusBeforeSendingToDatabase","updateTodoImpStatusBeforeSendingToDatabase","doneText","lineHeight","fromTaskOrProject","projectName","myday","Accordion","active","setActiveState","accordionSection","layout","accordion","span","faChevronRight","rotate","h2","accordionTitle","accordionContent","TaskContainer","todoStatus","addTaskInFront","inCompletedTodoList","completedTaskList","inCompletedTaskList","myDayTaskMapper","MydayContainer","inCompleteTaskList","plannedTasksMapper","TododList","todayTasks","previousTasks","laterTasks","tommorrowTasks","todayList","previousTaskList","tommorrowTasksList","laterTasksList","PlannedContainer","endOfToday","newData","impTasksMapper","Important","AddProject","setProjectName","setProject","inputFocused","setInputFocused","history","useHistory","projectList","focus","focusedPlus","projectAddHandler","tasksInGivenProject","taskdone","ProjectItem","notification","to","activeClassName","img","projectImage","ProjectList","projectLis","listStyle","LeftSidebar","inCompleteNormalTasksList","inCompletePlannedTasksList","inCompleteImpTasksList","inCompleteMyDayTasksList","itemContainer","item","exact","marginLeft","faHome","NotificationList","ulContainer","li","notifcation","closeContainer","TodoList","memo","CompletedTasks","ProjectMenu","onClickOutside","onClickDelete","menuRef","clickOutSideHandler","contains","addEventListener","removeEventListener","dropdownMenu","content","contentDanger","ProjectTitle","inputValue","onChangeInput","initialInputValue","onHideInput","setProjects","updatedProjectName","editIndex","altKey","shiftKey","ctrlKey","size","maxLength","autoFocus","ProjectContainer","useParams","allProjects","setAllProject","setTasksInProject","setTasksAfterDeleteingProject","showMenu","setShowMenu","showInput","setShowInput","selectedProject","replace","request","method","url","outSideClickHandler","useCallback","val","imgContainer","dots","CompletedTodoList","App","setUserDetails","loggedIn","pageStatus","setPageStatus","setNormalTasks","setPlannedTasks","setImpTasks","setMydayTasks","Promise","allSettled","res1","res2","res3","res4","res5","res6","newTodoList","sort","b","getTime","loadTasks","useSetTaskOnLoad","getCurrentUser","routes","component","path","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.83af78d3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"textContainer\":\"AddDueDate_textContainer__3hOmo\",\"text\":\"AddDueDate_text__2WssR\",\"date\":\"AddDueDate_date__bxmSY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headingHeader\":\"Header_headingHeader__1LVsX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"TaskContainer_container__3zkqY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"backdrop\":\"Backdrop_backdrop__v9yHW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"StepDetails_container__28j7T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"MyDayContainer_container__PkQr0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"PlannedContainer_container__m7aNR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ImportantContainer_container__1cNKf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"LeftSidebar_container__27AKW\",\"itemContainer\":\"LeftSidebar_itemContainer__5DZ-E\",\"active\":\"LeftSidebar_active__3Zsbm\",\"item\":\"LeftSidebar_item__13PtO\",\"icon\":\"LeftSidebar_icon__2NlCB\",\"text\":\"LeftSidebar_text__GqbkH\",\"notification\":\"LeftSidebar_notification__Ugcc1\"};","export default __webpack_public_path__ + \"static/media/logo.5a39ce1f.png\";","export default __webpack_public_path__ + \"static/media/welcome-center.100bd9d9.png\";","import React from 'react';\nimport { motion } from 'framer-motion';\nimport Styles from './GoogleButton.module.scss';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faGoogle } from '@fortawesome/fontawesome-free-brands';\n\n/**\n * @param {import('react').ButtonHTMLAttributes} props\n */\n\nexport default function GoogleButton(props) {\n  return (\n    <motion.a\n      {...props}\n      href={`/api/auth/google`}\n      whileTap={{ scale: 0.9 }}\n      className={[Styles.google, Styles.btn].join(' ')}>\n      <FontAwesomeIcon icon={faGoogle} style={{ marginRight: '8px' }} />\n      Login with Google\n    </motion.a>\n  );\n}\n","import React from 'react';\nimport Styles from './TwitterButton.module.scss';\nimport { motion } from 'framer-motion';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTwitter } from '@fortawesome/fontawesome-free-brands';\n\n/**\n * @param {import('react').ButtonHTMLAttributes} props\n */\nexport default function TwitterButton(props) {\n  return (\n    <motion.a\n      {...props}\n      href={`/api/auth/twitter`}\n      whileTap={{ scale: 0.9 }}\n      className={[Styles.twitter, Styles.btn].join(' ')}>\n      <FontAwesomeIcon icon={faTwitter} style={{ marginRight: '8px' }} />\n      Login with Twitter\n    </motion.a>\n  );\n}\n","import React from 'react';\nimport Styles from './Home.module.scss';\nimport logo from '../../asset/logo.png';\nimport Banner from '../../asset/welcome-center.png';\nimport GoogleButton from '../UI/GoogleButton/GoogleButton';\nimport TwitterButton from '../UI/TwitterButton/TwitterButton';\nexport default function Home() {\n  return (\n    <div className={Styles.container}>\n      <img className={Styles.logo} src={logo} alt='logo of company' />\n      <h1 className={Styles.heading}>Task Manager By Pranshu Shah</h1>\n      <img className={Styles.banner} src={Banner} alt={'banner'} />\n      <GoogleButton />\n      <TwitterButton />\n    </div>\n  );\n}\n","import React from 'react';\nimport Logo from '../../asset/logo.png';\nimport Styles from './Loading.module.scss';\nexport default function Loading() {\n  return (\n    <div className={Styles.container}>\n      <img src={Logo} alt='logo' className={Styles.logo} />\n      <div className={Styles.loader} />\n    </div>\n  );\n}\n","import { atom } from 'recoil';\nimport { userInfo } from '../utils/types';\n/**\n * atom containing user details\n */\n\nexport const loginDetailsState = atom<userInfo | null>({\n  key: 'loginDetailsState',\n  default: null,\n});\n","import { selector } from 'recoil';\nimport { loginDetailsState } from '../atoms/loginDetailsAtom';\n/**\n * @returns whether you are logged in or not\n */\nexport const loginState = selector<boolean>({\n  key: 'loginState',\n  get: ({ get }) => {\n    const loginDetails = get(loginDetailsState);\n    return loginDetails ? true : false;\n  },\n});\n","import { atom } from 'recoil';\nimport { todoType } from '../utils/types';\n/**\n * atom containing normal todo list\n */\n\nexport const normalTasksState = atom<todoType[]>({\n  key: 'normalTasksState',\n  default: [],\n});\n","import { atom } from 'recoil';\nimport { plannedTodoType } from '../utils/types';\n/**\n * atom containing planned list\n */\n\nexport const planbedTasksState = atom<plannedTodoType[]>({\n  key: 'planbedTasksState',\n  default: [],\n});\n","import { atom } from 'recoil';\nimport { myDayTodoType } from '../utils/types';\n/**\n * atom containing myday todo list\n */\nexport const myDayState = atom<myDayTodoType[]>({\n  key: 'myDayState',\n  default: [],\n});\n","import { atom } from 'recoil';\nimport { todoType } from '../utils/types';\n/**\n * atom containing imp todo list\n */\nexport const ImpTasksState = atom<todoType[]>({\n  key: 'ImpTasksState',\n  default: [],\n});\n","import { atom } from 'recoil';\nimport { project } from '../utils/types';\n/**\n * atom containing list of projects\n */\nexport const projects = atom<project[]>({\n  key: 'projectsAtom',\n  default: [],\n});\n","import { atom } from 'recoil';\nimport { todoInProjectType } from '../utils/types';\n/**\n * atom containing todo list in project\n */\nexport const projectTasksAtom = atom<todoInProjectType[]>({\n  key: 'projectTasksAtom',\n  default: [],\n});\n","import axios from 'axios';\n\nconst instance = axios.create({\n  timeout: 9000,\n  timeoutErrorMessage: 'We were unable to update data',\n});\n\nexport default instance;\n","import { atom } from 'recoil';\nimport { notification } from '../utils/types';\n/**\n * atom containing notification list\n */\n\nexport const notificationAtom = atom<notification[]>({\n  key: 'notificationArray',\n  default: [],\n});\n","import { notificationAtom } from '../../atoms/NotificationAtom';\nimport produce from 'immer';\nimport { v4 } from 'uuid';\nimport { useSetRecoilState } from 'recoil';\n/**\n * custom hook for adding or removing notification.\n * @returns object containing function that will remove or add notification\n */\nexport function useSetNotification() {\n  const setNotificationList = useSetRecoilState(notificationAtom);\n\n  function removeNotifcation(id: string) {\n    setNotificationList((notificationList) => {\n      const newNotificationList = produce(notificationList, (draft) => {\n        draft.splice(\n          draft.findIndex((notifitcation) => notifitcation.id === id),\n          1,\n        );\n      });\n      return newNotificationList;\n    });\n  }\n  function addNotification(message: string, type: string) {\n    const id = v4();\n    setNotificationList((notficationList) => {\n      const newNotificationList = produce(notficationList, (draft) => {\n        draft.push({ message, id, type });\n      });\n      return newNotificationList;\n    });\n    setTimeout(() => {\n      removeNotifcation(id);\n    }, 4000);\n  }\n  return { addNotification, removeNotifcation };\n}\n","export default __webpack_public_path__ + \"static/media/plus.dd3ea1a5.svg\";","export default __webpack_public_path__ + \"static/media/circle.f2c606a4.svg\";","import React from 'react';\nimport Styles from './Input.module.scss';\n\ninterface inputProps\n  extends React.InputHTMLAttributes<\n    React.RefAttributes<HTMLInputElement> | HTMLInputElement\n  > {\n  addProject?: boolean;\n  addTodo?: boolean;\n  addStep?: boolean;\n  stepInput?: boolean;\n  doneStepInput?: boolean;\n  todoInDetails?: boolean;\n  projectTitle?: boolean;\n}\n\nfunction Input(\n  {\n    addProject,\n    addTodo,\n    addStep,\n    stepInput,\n    doneStepInput,\n    todoInDetails,\n    projectTitle,\n    ...props\n  }: inputProps,\n  ref: React.Ref<HTMLInputElement>,\n) {\n  let classes: string = '';\n  if (addStep) {\n    classes = [Styles.addInput, Styles.addStepInput].join(' ');\n  } else if (addProject) {\n    classes = Styles.addProject;\n  } else if (stepInput) {\n    classes = Styles.stepInputText;\n  } else if (doneStepInput) {\n    classes = [Styles.stepInputText, Styles.inputDoneText].join(' ');\n  } else if (todoInDetails) {\n    classes = Styles.todoDetailInput;\n  } else if (projectTitle) {\n    classes = Styles.projectTitle;\n  } else {\n    classes = [Styles.addInput, Styles.addTodoInput].join(' ');\n  }\n\n  return <input type='text' {...props} className={classes} ref={ref} />;\n}\n\nexport default React.forwardRef(Input);\n","import plus from '../../utils/svg/plus.svg';\nimport circle from '../../utils/svg/circle.svg';\nimport React, { useState } from 'react';\nimport Styles from './AddTodo.module.scss';\nimport Input from '../UI/Input/Input';\n\ntype AddTodoProps = {\n  onAddTodo: (title: string, todoId?: null | string) => Promise<void>;\n  placeholder: string;\n};\n\nfunction AddTodo({ onAddTodo, placeholder }: AddTodoProps) {\n  const [textFocus, setTextFocus] = useState(false);\n  const [inputText, setInputText] = useState('');\n\n  function inputFocusHandler() {\n    setTextFocus(true);\n  }\n\n  function inputBlurHandler() {\n    setTextFocus(false);\n  }\n\n  function inputChangeHandler(e: React.ChangeEvent<HTMLInputElement>) {\n    setInputText(e.target.value);\n  }\n\n  function enterHandler(e: React.KeyboardEvent<HTMLInputElement>) {\n    if (e.key === 'Enter') {\n      addTodoHandler();\n      setInputText('');\n    }\n  }\n\n  function addTodoHandler() {\n    onAddTodo(inputText.trim());\n    setInputText('');\n  }\n\n  return (\n    <div\n      className={\n        textFocus\n          ? [Styles.container, Styles.containerFocused].join(' ')\n          : Styles.container\n      }\n    >\n      <div className={Styles.plusContainer}>\n        <img\n          src={textFocus ? circle : plus}\n          alt='add svg'\n          className={Styles.plus}\n        />\n      </div>\n      <Input\n        addTodo\n        type='text'\n        placeholder={placeholder}\n        className={Styles.input}\n        onFocus={inputFocusHandler}\n        onBlur={inputBlurHandler}\n        value={inputText}\n        onChange={inputChangeHandler}\n        onKeyUp={enterHandler}\n      />\n      {inputText.length > 0 ? (\n        <div className={Styles.addButton} onClick={addTodoHandler}>\n          Add\n        </div>\n      ) : null}\n    </div>\n  );\n}\n\nexport default AddTodo;\n","import React from 'react';\nimport Styles from './Header.module.scss';\ninterface headerProps extends React.InputHTMLAttributes<HTMLHeadingElement> {\n  displayTitle: string;\n}\n\nfunction Header({ displayTitle, ...props }: headerProps) {\n  return (\n    <h1 className={Styles.headingHeader} {...props}>\n      {displayTitle}\n    </h1>\n  );\n}\n\nexport default Header;\n","import { atom } from 'recoil';\nimport { todoType, plannedTodoType, myDayTodoType } from '../utils/types';\n/**\n * atom containing selected todo for atom details\n */\nexport const selectedTodo = atom<\n  todoType | plannedTodoType | myDayTodoType | null\n>({\n  key: 'selectedTodoAtom',\n  default: null,\n});\n","import React from 'react';\nimport Styles from './CloseButton.module.scss';\nimport { motion } from 'framer-motion';\n\ntype closeButtonProps = {\n  onClick: (() => Promise<void>) | (() => void);\n  bigger?: boolean;\n};\n\nfunction CloseButton({ onClick, bigger = false }: closeButtonProps) {\n  return (\n    <motion.button\n      whileTap={{ scale: 0.9 }}\n      className={bigger ? Styles.bigButton : Styles.closeButton}\n      onClick={(e) => {\n        e.stopPropagation();\n        onClick();\n      }}\n    >\n      &times;\n    </motion.button>\n  );\n}\n\nexport default CloseButton;\n","import { DefaultValue, selector } from 'recoil';\nimport { ImpTasksState } from '../atoms/ImportantTaskAtom';\nimport { myDayState } from '../atoms/MyDayTaskAtom';\nimport { planbedTasksState } from '../atoms/plannedTasksState';\nimport { normalTasksState } from '../atoms/NormalTaskAtom';\nimport { projectTasksAtom } from '../atoms/todoInProjects';\nimport { everyTodoType } from '../utils/types';\n/**\n * you can get or set All the todos\n */\nexport const allTodos = selector<everyTodoType>({\n  key: 'allTodos',\n  get: ({ get }) => {\n    const normalTodos = get(normalTasksState);\n    const projectTodos = get(projectTasksAtom);\n    return { normalTodos, projectTodos };\n  },\n  set: ({ set }, updatedValue) => {\n    if (!(updatedValue instanceof DefaultValue)) {\n      if (updatedValue.normalTodos) {\n        set(normalTasksState, updatedValue.normalTodos);\n      }\n      if (updatedValue.projectTodos) {\n        set(projectTasksAtom, updatedValue.projectTodos);\n      }\n      if (updatedValue.impTodos) {\n        set(ImpTasksState, updatedValue.impTodos);\n      }\n      if (updatedValue.plannedTodos) {\n        set(planbedTasksState, updatedValue.plannedTodos);\n      }\n      if (updatedValue.myDayTodos) {\n        set(myDayState, updatedValue.myDayTodos);\n      }\n    }\n  },\n});\n","import { Op, todoType } from '../types';\nimport produce from 'immer';\n\n/**\n *\n * @param todoList list of any type extending `todoType`\n * @param newTodo todo object extending `todoType`\n * @param ops tuple element of `op`\n *\n * @returns updated todo list of type `t`\n */\n\nexport function updatLists<t extends todoType>(\n  todoList: t[],\n  newTodo: t,\n  ops: Op,\n) {\n  if (ops === 'add') {\n    return produce(todoList, (draft: t[]) => {\n      draft.splice(0, 0, newTodo);\n    });\n  } else if (ops === 'update') {\n    return produce(todoList, (draft: t[]) => {\n      const replaceIndex = draft.findIndex((todo) => todo.id === newTodo.id);\n      if (replaceIndex !== -1) {\n        draft[replaceIndex] = newTodo;\n      }\n    });\n  } else {\n    return produce(todoList, (draft: t[]) => {\n      const deleteIndex = draft.findIndex((todo) => todo.id === newTodo.id);\n      if (deleteIndex > -1) {\n        draft.splice(deleteIndex, 1);\n      }\n    });\n  }\n}\n","import { ImpTasksState } from '../../atoms/ImportantTaskAtom';\nimport { myDayState } from '../../atoms/MyDayTaskAtom';\nimport { normalTasksState } from '../../atoms/NormalTaskAtom';\nimport { planbedTasksState } from '../../atoms/plannedTasksState';\nimport { projectTasksAtom } from '../../atoms/todoInProjects';\nimport { allTodos } from '../../selector/allTodos';\nimport { useSetRecoilState, useRecoilValue, useRecoilState } from 'recoil';\nimport { updatLists } from '../helperFunction/updateLists';\nimport { selectedTodo } from '../../atoms/selectedTodoAtom';\nimport {\n  todoType,\n  myDayTodoType,\n  plannedTodoType,\n  todoInProjectType,\n  everyTodoType,\n} from '../types';\n\n/**\n * custom hook for syncing all todos in frontend after updating todo in backend\n */\nexport function useSetAllTask() {\n  const normalTasks = useRecoilValue(normalTasksState);\n  const plannedTasks = useRecoilValue(planbedTasksState);\n  const impTasks = useRecoilValue(ImpTasksState);\n  const mydayTasks = useRecoilValue(myDayState);\n  const todoInProject = useRecoilValue(projectTasksAtom);\n  const setAllTasks = useSetRecoilState(allTodos);\n  const [selectedtodo, setTodo] = useRecoilState(selectedTodo);\n\n  function updateAllTasks(\n    todo: todoType | myDayTodoType | plannedTodoType | todoInProjectType,\n    newTodo: todoType | myDayTodoType | plannedTodoType | todoInProjectType,\n  ) {\n    const updater: everyTodoType = {};\n    if (newTodo.normalTask) {\n      updater.normalTodos = updatLists<todoType>(\n        normalTasks,\n        newTodo,\n        'update',\n      );\n    } else {\n      if (newTodo.projectId) {\n        // already checked for undefined\n        updater.projectTodos = updatLists<todoInProjectType>(\n          todoInProject, //@ts-ignore\n          newTodo,\n          'update',\n        );\n      }\n    }\n    if (newTodo.dueDate && !todo.dueDate) {\n      updater.plannedTodos = updatLists<plannedTodoType>(\n        plannedTasks,\n        //@ts-ignore\n        newTodo,\n        'add',\n      );\n    }\n    if (!newTodo.dueDate && todo.dueDate) {\n      // already checked for undefined\n      updater.plannedTodos = updatLists<plannedTodoType>(\n        plannedTasks,\n        //@ts-ignore\n        newTodo,\n        'delete',\n      );\n    }\n    if (newTodo.dueDate && todo.dueDate) {\n      // already checked for undefined\n      updater.plannedTodos = updatLists<plannedTodoType>(\n        plannedTasks,\n        //@ts-ignore\n        newTodo,\n        'update',\n      );\n    }\n    if (!todo.important && newTodo.important) {\n      updater.impTodos = updatLists<todoType>(impTasks, newTodo, 'add');\n    }\n    if (todo.important && !newTodo.important) {\n      updater.impTodos = updatLists<todoType>(impTasks, newTodo, 'delete');\n    }\n    if (todo.important && newTodo.important) {\n      updater.impTodos = updatLists<todoType>(impTasks, newTodo, 'update');\n    }\n    if (todo.myDay && todo.myDay) {\n      // already checked for undefined\n      updater.myDayTodos = updatLists<myDayTodoType>(\n        mydayTasks,\n        //@ts-ignore\n        newTodo,\n        'update',\n      );\n    }\n    if (!todo.myDay && newTodo.myDay) {\n      // already checked for undefined\n      updater.myDayTodos = updatLists<myDayTodoType>(\n        mydayTasks,\n        //@ts-ignore\n        newTodo,\n        'add',\n      );\n    }\n    if (todo.myDay && !newTodo.myDay) {\n      // already checked for undefined\n      updater.myDayTodos = updatLists<myDayTodoType>(\n        mydayTasks,\n        //@ts-ignore\n        newTodo,\n        'delete',\n      );\n    }\n    if (selectedtodo) {\n      setTodo(newTodo);\n    }\n    setAllTasks(updater);\n  }\n  return updateAllTasks;\n}\n","import { useSetRecoilState } from 'recoil';\nimport { selectedTodo } from '../../atoms/selectedTodoAtom';\nimport { useSetAllTask } from './useSetAllTask';\nimport { todoBody, todoType } from '../types';\nimport { endOfDay } from 'date-fns';\ntype From = 'todoType' | 'todoBody';\n/**\n * sync your changes from details to all todo container\n */\nexport function useSetTaskFromTaskDetails() {\n  const setTodo = useSetRecoilState(selectedTodo);\n  const updateAllTasks = useSetAllTask();\n\n  function updater(\n    todo: todoType,\n    updateTodo: todoBody | todoType,\n    from: From = 'todoType',\n  ) {\n    if (from === 'todoBody') {\n      if (updateTodo.dueDate) {\n        const newTodo = {\n          ...updateTodo,\n          createdAt: new Date(updateTodo.createdAt),\n          dueDate: endOfDay(new Date(updateTodo.dueDate)),\n        };\n        updateAllTasks(todo, newTodo);\n        setTodo(newTodo);\n      } else {\n        const newTodo = {\n          ...updateTodo,\n          createdAt: new Date(updateTodo.createdAt),\n          dueDate: undefined,\n        };\n        updateAllTasks(todo, newTodo);\n        setTodo(newTodo);\n      }\n    } else {\n      // @ts-ignore\n      updateAllTasks(todo, updateTodo);\n      // @ts-ignore\n      setTodo(updateTodo);\n    }\n  }\n\n  return updater;\n}\n","import { AxiosRequestConfig } from 'axios';\n\nexport function timeMessageObjCreate(message: string): AxiosRequestConfig {\n  return { timeoutErrorMessage: message };\n}\n","import React from 'react';\nimport Styles from './myDayBox.module.scss';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSun } from '@fortawesome/free-solid-svg-icons';\nimport { useRecoilValue } from 'recoil';\nimport { selectedTodo } from '../../../atoms/selectedTodoAtom';\nimport axios from '../../../axios';\nimport { MydayTodoBodyType } from '../../../utils/types';\nimport CloseButton from '../CloseButton/CloseButton';\nimport { useSetTaskFromTaskDetails } from '../../../utils/customHooks/useUpdateTaskFromTaskDetails';\nimport { useSetNotification } from '../../../utils/customHooks/useAddNotification';\nimport { timeMessageObjCreate } from '../../../utils/helperFunction/timeoutMessage';\n\nfunction MyDayBox() {\n  const todo = useRecoilValue(selectedTodo);\n  const updateTaskFromDetails = useSetTaskFromTaskDetails();\n  const { addNotification } = useSetNotification();\n  async function AddToMyDayHandler() {\n    if (!todo?.myDay && todo) {\n      const oldTodo = { ...todo };\n      updateTaskFromDetails(todo, { ...todo, myDay: true });\n      try {\n        if (window.navigator.onLine) {\n          const res = await axios.patch<MydayTodoBodyType>(\n            '/api/todo/edit/myday',\n            {\n              todoId: todo.id,\n              myDay: true,\n            },\n            timeMessageObjCreate('Unable to update todo'),\n          );\n          if (res.status !== 200) {\n            updateTaskFromDetails(todo, oldTodo);\n          }\n        } else {\n          throw new Error('No internet connection');\n        }\n      } catch (e) {\n        addNotification(e.message, 'Network Error');\n      }\n    }\n  }\n\n  async function removeMyDayHandler() {\n    if (todo) {\n      const oldTodo = { ...todo };\n      updateTaskFromDetails(todo, { ...todo, myDay: false });\n      try {\n        if (window.navigator.onLine) {\n          const res = await axios.patch<MydayTodoBodyType>(\n            '/api/todo/edit/myday',\n            {\n              todoId: todo.id,\n              myDay: false,\n            },\n            timeMessageObjCreate('Unable to update todo'),\n          );\n          if (res.status !== 200) {\n            updateTaskFromDetails(todo, oldTodo);\n          }\n        } else {\n          throw new Error('No internet connection');\n        }\n      } catch (e) {\n        addNotification(e.message, 'Network Error');\n      }\n    }\n  }\n\n  return (\n    <div className={Styles.mydayContainer}>\n      <div onClick={AddToMyDayHandler} className={Styles.mydayTextContainer}>\n        <FontAwesomeIcon icon={faSun} />\n        <span\n          className={\n            todo?.myDay\n              ? [Styles.mydayText, Styles.activeText].join(' ')\n              : Styles.mydayText\n          }\n        >\n          {todo?.myDay ? 'Added to My Day' : 'Add to My Day'}\n        </span>\n      </div>\n      {todo?.myDay ? (\n        <div className={Styles.buttonContainer}>\n          <CloseButton onClick={removeMyDayHandler} />\n        </div>\n      ) : null}\n    </div>\n  );\n}\n\nexport default MyDayBox;\n","import React from 'react';\nimport Styles from './CheckBox.module.scss';\n\ninterface checkboxProps extends React.InputHTMLAttributes<HTMLInputElement> {\n  small?: boolean;\n}\n\nfunction CheckBox({ small, ...props }: checkboxProps) {\n  const id = Math.random().toString();\n  return (\n    <div>\n      <input\n        id={id}\n        type='checkbox'\n        {...props}\n        className={Styles.inputCheckBox}\n      />\n      <label\n        htmlFor={id}\n        className={small ? Styles.smallCheckBox : Styles.checkBox}\n      />\n    </div>\n  );\n}\n\nexport default CheckBox;\n","import plus from '../../../utils/svg/plus.svg';\nimport circle from '../../../utils/svg/circle.svg';\nimport React, { useState } from 'react';\nimport Styles from './AddStep.module.scss';\nimport { selectedTodo } from '../../../atoms/selectedTodoAtom';\nimport { useRecoilValue } from 'recoil';\nimport axios from '../../../axios';\nimport { todoBody } from '../../../utils/types';\nimport { useSetTaskFromTaskDetails } from '../../../utils/customHooks/useUpdateTaskFromTaskDetails';\nimport { useSetNotification } from '../../../utils/customHooks/useAddNotification';\nimport { timeMessageObjCreate } from '../../../utils/helperFunction/timeoutMessage';\nfunction AddTodo() {\n  const [textFocus, setTextFocus] = useState(false);\n  const [inputText, setInputText] = useState('');\n  const todo = useRecoilValue(selectedTodo);\n  const updateTaskFromDetails = useSetTaskFromTaskDetails();\n  const { addNotification } = useSetNotification();\n\n  function inputFocusHandler() {\n    setTextFocus(true);\n  }\n\n  function inputBlurHandler() {\n    setTextFocus(false);\n  }\n\n  function inputChangeHandler(e: React.ChangeEvent<HTMLInputElement>) {\n    setInputText(e.target.value);\n  }\n\n  function enterHandler(e: React.KeyboardEvent<HTMLInputElement>) {\n    if (e.key === 'Enter') {\n      addTodoHandler();\n    }\n  }\n\n  async function addTodoHandler() {\n    try {\n      if (window.navigator.onLine) {\n        const res = await axios.post<todoBody>(\n          '/api/step/new',\n          {\n            todoId: todo?.id,\n            stepTitle: inputText.trim(),\n          },\n          timeMessageObjCreate('Unable to add step todo'),\n        );\n        if (res.status === 200 && todo) {\n          updateTaskFromDetails(todo, res.data, 'todoBody');\n          setInputText('');\n        }\n      } else {\n        throw new Error('No internet connection');\n      }\n    } catch (e) {\n      addNotification(e.message, 'Network Error');\n    }\n  }\n\n  return (\n    <div\n      className={\n        textFocus\n          ? [Styles.container, Styles.containerFocused].join(' ')\n          : Styles.container\n      }\n    >\n      <div className={Styles.plusContainer}>\n        <img\n          src={textFocus ? circle : plus}\n          alt='add svg'\n          className={Styles.plus}\n        />\n      </div>\n      <input\n        type='text'\n        placeholder={'Add Step'}\n        className={Styles.input}\n        onFocus={inputFocusHandler}\n        onBlur={inputBlurHandler}\n        value={inputText}\n        onChange={inputChangeHandler}\n        onKeyPress={enterHandler}\n      />\n      {inputText.length > 0 ? (\n        <div className={Styles.addButton} onClick={addTodoHandler}>\n          Add\n        </div>\n      ) : null}\n    </div>\n  );\n}\n\nexport default AddTodo;\n","import React, { useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { AnimatePresence, motion } from 'framer-motion';\nimport Styles from './Tooltip.module.scss';\n\ntype TooltipProps = {\n  children: React.ReactNode;\n  render: string;\n};\n\nfunction Tooltip({ children, render }: TooltipProps) {\n  const [showTooltip, setShowTooltip] = useState(false);\n  const [xcord, setXcord] = useState<null | number>(null);\n  const [ycord, setYcord] = useState<null | number>(null);\n  let el: Element | null;\n  el = document.querySelector('.tooltip-rc');\n  if (!el) {\n    el = document.createElement('div');\n    el.className = 'tooltip-rc';\n    document.body.appendChild(el);\n  }\n\n  function showTooltipHandler(\n    e: React.MouseEvent<HTMLSpanElement, MouseEvent>,\n  ) {\n    setShowTooltip(true);\n    setXcord(e.pageX);\n    setYcord(e.pageY);\n  }\n  function hideTooltipHandler() {\n    setShowTooltip(false);\n    setXcord(null);\n    setYcord(null);\n  }\n\n  const varaints = {\n    initial: {\n      opacity: 0,\n      scale: 0.1,\n    },\n    animate: {\n      opacity: 1,\n      scale: 1,\n    },\n  };\n\n  function portalHandler() {\n    if (showTooltip && el && xcord && ycord) {\n      return createPortal(\n        <AnimatePresence>\n          <motion.div\n            initial='initial'\n            animate='animate'\n            variants={varaints}\n            style={{\n              position: 'absolute',\n              left: xcord,\n              top: ycord - 50,\n            }}\n          >\n            <div className={Styles.tooltipContainer}>\n              {render}\n              <span className={Styles.arrow} />\n            </div>\n          </motion.div>\n        </AnimatePresence>,\n        el,\n      );\n    } else {\n      return <div></div>;\n    }\n  }\n\n  const data = (\n    <span\n      key={0}\n      onMouseMove={showTooltipHandler}\n      onMouseLeave={hideTooltipHandler}\n    >\n      {children}\n    </span>\n  );\n\n  return (\n    <>\n      {data}\n      {portalHandler()}\n    </>\n  );\n}\n\nexport default Tooltip;\n","import React from 'react';\nimport Styles from './Button.module.scss';\nimport { motion, HTMLMotionProps } from 'framer-motion';\n\ninterface buttonProps extends HTMLMotionProps<'button'> {\n  primary?: boolean;\n  secondary?: boolean;\n  danger?: boolean;\n  dimension?: 'small' | 'medium' | 'large' | 'huge';\n}\n\nfunction Button({\n  dimension,\n  primary,\n  secondary,\n  danger,\n  children,\n  ...props\n}: buttonProps) {\n  let classes: string[];\n  if (secondary) {\n    classes = [Styles.button, Styles.secondary];\n  } else if (danger) {\n    classes = [Styles.button, Styles.danger];\n  } else {\n    classes = [Styles.button, Styles.primary];\n  }\n\n  switch (dimension) {\n    case 'huge': {\n      classes.push(Styles.huge);\n      break;\n    }\n    case 'large': {\n      classes.push(Styles.large);\n      break;\n    }\n    case 'small': {\n      classes.push(Styles.small);\n      break;\n    }\n    default: {\n      classes.push(Styles.medium);\n    }\n  }\n\n  return (\n    <motion.button\n      {...props}\n      whileTap={{ scale: 0.9 }}\n      className={classes.join(' ')}\n    >\n      {children}\n    </motion.button>\n  );\n}\n\nexport default Button;\n","import React from 'react';\nimport Styles from './Backdrop.module.scss';\nimport { AnimatePresence, motion } from 'framer-motion';\n\ntype backdropProps = {\n  onClick: () => void;\n  show: boolean;\n  children: React.ReactNode;\n};\n\nfunction BackDrop({ onClick, show, children }: backdropProps) {\n  const backdropVariants = {\n    visible: {\n      opacity: 1,\n      transition: {\n        when: 'beforeChildren',\n        duration: 0.2,\n        delayChildren: 0.2,\n      },\n    },\n    hidden: {\n      opacity: 0,\n      transition: {\n        when: 'afterChildren',\n        duration: 0.2,\n        delay: 0.2,\n      },\n    },\n  };\n  return show ? (\n    <AnimatePresence>\n      <motion.div\n        initial='hidden'\n        animate='visible'\n        exit='hidden'\n        variants={backdropVariants}\n        onClick={onClick}\n        className={Styles.backdrop}\n      >\n        {children}\n      </motion.div>\n    </AnimatePresence>\n  ) : null;\n}\n\nexport default BackDrop;\n","import React from 'react';\nimport Button from '../Button/Button';\nimport BackDrop from './Backdrop/Backdrop';\nimport Styles from './Modal.module.scss';\nimport { createPortal } from 'react-dom';\nimport { motion } from 'framer-motion';\n\ntype modalProps = {\n  title: string;\n  modalConfirmed: (() => void) | (() => Promise<void>);\n  modalClosed: () => void;\n  show: boolean;\n  deleteButtonTitle: string;\n};\n\nfunction Modal({\n  title,\n  modalConfirmed,\n  modalClosed,\n  show,\n  deleteButtonTitle,\n}: modalProps) {\n  let el: Element | null;\n  el = document.querySelector('.modal');\n  if (!el) {\n    el = document.createElement('div');\n    el.className = 'modal';\n    document.body.appendChild(el);\n  }\n  return createPortal(\n    <BackDrop onClick={modalClosed} show={show}>\n      <motion.dialog\n        open={show}\n        initial={{ y: '100vh' }}\n        animate={{ y: 0 }}\n        exit={{ y: '100vh' }}\n        transition={{ duration: 0.1 }}\n        className={Styles.container}\n      >\n        <div className={Styles.contentContainer}>\n          <p className={Styles.heading}>\n            \"{title}\" will be permanently deleted.\n          </p>\n          <p className={Styles.text}>You won't be able to undo this action.</p>\n        </div>\n        <div className={Styles.action}>\n          <Button\n            style={{ marginRight: '12px' }}\n            onClick={modalClosed}\n            secondary\n            dimension={'small'}\n          >\n            Cancel\n          </Button>\n          <Button onClick={modalConfirmed} danger dimension={'small'}>\n            {deleteButtonTitle}\n          </Button>\n        </div>\n      </motion.dialog>\n    </BackDrop>,\n    el,\n  );\n}\n\nexport default Modal;\n","import React, { useState, useRef } from 'react';\nimport CheckBox from '../../UI/CheckBox/CheckBox';\nimport { stepType, todoBody, editStepDoneStatus } from '../../../utils/types';\nimport axios from '../../../axios';\nimport { useRecoilValue } from 'recoil';\nimport { selectedTodo } from '../../../atoms/selectedTodoAtom';\nimport Styles from './StepItem.module.scss';\nimport CloseButton from '../CloseButton/CloseButton';\nimport { useSetTaskFromTaskDetails } from '../../../utils/customHooks/useUpdateTaskFromTaskDetails';\nimport Tooltip from '../../UI/Tooltip/Tooltip';\nimport { useSetNotification } from '../../../utils/customHooks/useAddNotification';\nimport Input from '../../UI/Input/Input';\nimport Modal from '../../UI/Modal/Modal';\nimport { timeMessageObjCreate } from '../../../utils/helperFunction/timeoutMessage';\nimport produce from 'immer';\n\ntype stepProps = {\n  step: stepType;\n};\n\ntype editStepTitle = {\n  todoId: string;\n  projectId?: string;\n  newStepTitle: string;\n  stepId: string;\n};\n\nfunction StepItem({ step }: stepProps) {\n  const { addNotification } = useSetNotification();\n  const todo = useRecoilValue(selectedTodo);\n  const updateTaskFromDetails = useSetTaskFromTaskDetails();\n  const inputRef = useRef<HTMLInputElement | null>(null);\n  const [stepInput, setStepInput] = useState(step.taskTitle);\n  const [modalToggle, setModalToggle] = useState(false);\n\n  async function stepDoneStatusChangeHandler(newStauts: editStepDoneStatus) {\n    if (todo) {\n      const oldTodo = { ...todo };\n\n      const newTodo = produce(todo, (draft) => {\n        const stepIndex = draft.steps.findIndex(\n          (step) => step.id === newStauts.stepId,\n        );\n        if (stepIndex !== -1) {\n          draft.steps[stepIndex].done = newStauts.done;\n        }\n        return draft;\n      });\n\n      updateTaskFromDetails(todo, newTodo);\n      try {\n        if (window.navigator.onLine) {\n          const res = await axios.patch<todoBody>(\n            '/api/edit/step/done',\n            newStauts,\n            timeMessageObjCreate('Unable to update step todo'),\n          );\n          if (res.status !== 200) {\n            updateTaskFromDetails(todo, oldTodo);\n          }\n        } else {\n          throw new Error('No internet connection');\n        }\n      } catch (e) {\n        addNotification(e.message, 'Network Error');\n      }\n    }\n  }\n\n  function modalCloseHandler() {\n    setModalToggle(false);\n  }\n\n  function modalOpenHandler() {\n    setModalToggle(true);\n  }\n\n  function checkBoxChangeHandler(e: React.ChangeEvent<HTMLInputElement>) {\n    if (todo) {\n      stepDoneStatusChangeHandler({\n        todoId: todo.id,\n        stepId: step.id,\n        done: e.target.checked,\n      });\n    }\n  }\n\n  async function stepDeleteHandler() {\n    if (todo) {\n      const oldTodo = { ...todo };\n\n      const newTodo = produce(todo, (draft) => {\n        const stepIndex = draft.steps.findIndex(\n          (currentStep) => currentStep.id === step.id,\n        );\n        if (stepIndex !== -1) {\n          draft.steps.splice(stepIndex, 1);\n        }\n        return draft;\n      });\n\n      updateTaskFromDetails(todo, newTodo);\n      try {\n        if (window.navigator.onLine) {\n          const res = await axios.patch<todoBody>(\n            '/api/edit/step/delete',\n            {\n              todoId: todo.id,\n              stepId: step.id,\n            },\n            {\n              timeoutErrorMessage: 'Unable to delete step',\n            },\n          );\n          if (res.status !== 200) {\n            updateTaskFromDetails(todo, oldTodo);\n          }\n        } else {\n          throw new Error('No internet connection');\n        }\n      } catch (e) {\n        addNotification(e.message, 'Network Error');\n      }\n    }\n    setModalToggle(false);\n  }\n\n  function stepInputChangeHandler(e: React.ChangeEvent<HTMLInputElement>) {\n    setStepInput(e.target.value);\n  }\n\n  async function todoTitleChangeHandler(newStatus: editStepTitle) {\n    if (todo) {\n      const oldTodo = { ...todo };\n\n      const newTodo = produce(todo, (draft) => {\n        const stepIndex = draft.steps.findIndex(\n          (currentStep) => currentStep.id === newStatus.stepId,\n        );\n        if (stepIndex !== -1) {\n          draft.steps[stepIndex].taskTitle = newStatus.newStepTitle;\n        }\n        return draft;\n      });\n\n      updateTaskFromDetails(todo, newTodo);\n      try {\n        if (window.navigator.onLine) {\n          const res = await axios.patch<todoBody>(\n            '/api/edit/step/title',\n            newStatus,\n            timeMessageObjCreate('Unable to update step todo'),\n          );\n          if (res.status !== 200) {\n            updateTaskFromDetails(todo, oldTodo);\n          }\n        } else {\n          throw new Error('No internet connection');\n        }\n      } catch (e) {\n        addNotification(e.message, 'Network Error');\n      }\n    }\n  }\n\n  function updateNewStepTitle() {\n    if (todo && stepInput) {\n      if (stepInput?.trim() !== step.taskTitle) {\n        todoTitleChangeHandler({\n          todoId: todo.id,\n          stepId: step.id,\n          newStepTitle: stepInput.trim(),\n        });\n      }\n    }\n    if (!stepInput?.trim()) {\n      setStepInput(step.taskTitle);\n    }\n  }\n\n  function doneOnEnter(e: React.KeyboardEvent<HTMLInputElement>) {\n    if (e.key === 'Enter') {\n      updateNewStepTitle();\n      inputRef.current?.blur();\n    }\n  }\n\n  return (\n    <>\n      <Modal\n        modalClosed={modalCloseHandler}\n        modalConfirmed={stepDeleteHandler}\n        title={step.taskTitle}\n        show={modalToggle}\n        deleteButtonTitle='Delete Step'\n      />\n      <div className={Styles.container}>\n        <div className={Styles.checkboxContainer}>\n          <Tooltip\n            render={step.done ? 'Mark as not completed' : 'Mark as completed'}\n          >\n            <CheckBox\n              checked={step.done}\n              onChange={checkBoxChangeHandler}\n              small={true}\n            />\n          </Tooltip>\n        </div>\n        <Input\n          type='text'\n          ref={inputRef}\n          onBlur={updateNewStepTitle}\n          onKeyUp={doneOnEnter}\n          value={stepInput}\n          doneStepInput={step.done}\n          stepInput={!step.done}\n          onChange={stepInputChangeHandler}\n        />\n        <div className={Styles.buttonContainer}>\n          <CloseButton onClick={modalOpenHandler} />\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default StepItem;\n","import React, { useState, useRef, useEffect } from 'react';\nimport Styles from './TodoBox.module.scss';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faStar } from '@fortawesome/free-regular-svg-icons';\nimport { faStar as SolidStar } from '@fortawesome/free-solid-svg-icons';\nimport { useRecoilValue } from 'recoil';\nimport { selectedTodo } from '../../../atoms/selectedTodoAtom';\nimport axios from '../../../axios';\nimport { useSetTaskFromTaskDetails } from '../../../utils/customHooks/useUpdateTaskFromTaskDetails';\nimport {\n  todoBody,\n  editImpStatus,\n  editDoneStatus,\n  editTitleStatus,\n} from '../../../utils/types';\nimport Checkbox from '../../UI/CheckBox/CheckBox';\nimport AddStep from '../AddStep/AddStep';\nimport StepItem from '../StepItem/StepItem';\nimport Tooltip from '../../UI/Tooltip/Tooltip';\nimport { useSetNotification } from '../../../utils/customHooks/useAddNotification';\nimport Input from '../../UI/Input/Input';\nimport { timeMessageObjCreate } from '../../../utils/helperFunction/timeoutMessage';\n\nfunction TodoBox() {\n  const todo = useRecoilValue(selectedTodo);\n  const [todoInputValue, setTodoInputValue] = useState(todo?.todoTitle);\n  const updateTaskFromDetails = useSetTaskFromTaskDetails();\n  const inputRef = useRef<HTMLInputElement | null>(null);\n  const { addNotification } = useSetNotification();\n  const todoId = todo?.id;\n\n  //whenever new todo is selected change the todoInputValue;\n  useEffect(\n    () => {\n      setTodoInputValue(todo?.todoTitle);\n    },\n    //doing this because does not whant to run on evert title change\n    // eslint-disable-next-line\n    [todoId],\n  );\n\n  async function todoImpStatusChangeHandler(newStauts: editImpStatus) {\n    if (todo) {\n      const oldTodo = { ...todo };\n      updateTaskFromDetails(todo, { ...todo, important: newStauts.important });\n      try {\n        if (window.navigator.onLine) {\n          const res = await axios.patch<todoBody>(\n            '/api/todo/edit/important',\n            newStauts,\n            timeMessageObjCreate('Unable to update todo'),\n          );\n          if (res.status !== 200) {\n            updateTaskFromDetails(todo, oldTodo);\n          }\n        } else {\n          throw new Error('No internet connection');\n        }\n      } catch (e) {\n        addNotification(e.message, 'Network Error');\n      }\n    }\n  }\n\n  async function todoDoneStatusChangeHandler(newStauts: editDoneStatus) {\n    if (todo) {\n      const oldTodo = { ...todo };\n      updateTaskFromDetails(todo, { ...todo, done: newStauts.done });\n      try {\n        if (window.navigator.onLine) {\n          const res = await axios.patch<todoBody>(\n            '/api/todo/edit/done',\n            newStauts,\n            timeMessageObjCreate('Unable to update todo'),\n          );\n          if (res.status !== 200) {\n            updateTaskFromDetails(todo, oldTodo);\n          }\n        } else {\n          throw new Error('No internet connection');\n        }\n      } catch (e) {\n        addNotification(e.message, 'Network Error');\n      }\n    }\n  }\n\n  async function todoTitleChangeHandler(newStatus: editTitleStatus) {\n    if (todo) {\n      const oldTodo = { ...todo };\n      updateTaskFromDetails(todo, {\n        ...todo,\n        todoTitle: newStatus.newTodoTitle,\n      });\n      try {\n        if (window.navigator.onLine) {\n          const res = await axios.patch<todoBody>(\n            '/api/todo/edit/title',\n            newStatus,\n            timeMessageObjCreate('Unable to update todo'),\n          );\n          if (res.status !== 200) {\n            updateTaskFromDetails(todo, oldTodo);\n          }\n        } else {\n          throw new Error('No internet connection');\n        }\n      } catch (e) {\n        addNotification(e.message, 'Network Error');\n      }\n    }\n  }\n\n  function updateNewTodoTitle() {\n    if (todo && todoInputValue) {\n      if (todoInputValue?.trim() !== todo.todoTitle) {\n        todoTitleChangeHandler({\n          todoId: todo.id,\n          newTodoTitle: todoInputValue?.trim(),\n        });\n      }\n    }\n    if (!todoInputValue?.trim()) {\n      setTodoInputValue(todo?.todoTitle);\n    }\n  }\n\n  function doneOnEnter(e: React.KeyboardEvent<HTMLInputElement>) {\n    if (e.key === 'Enter') {\n      inputRef.current?.blur();\n    }\n  }\n\n  function checkBoxChangeHandler(e: React.ChangeEvent<HTMLInputElement>) {\n    if (todo) {\n      todoDoneStatusChangeHandler({ todoId: todo.id, done: e.target.checked });\n    }\n  }\n\n  function impStatusChangeHandler() {\n    if (todo) {\n      todoImpStatusChangeHandler({\n        todoId: todo.id,\n        important: !todo.important,\n      });\n    }\n  }\n\n  function todoTitleInputChangeHandler(e: React.ChangeEvent<HTMLInputElement>) {\n    setTodoInputValue(e.target.value);\n  }\n\n  const steps = todo?.steps.map((step, index) => (\n    <StepItem step={step} key={index} />\n  ));\n\n  return todo ? (\n    <div className={Styles.container}>\n      <div className={Styles.textContainer}>\n        <div className={Styles.checkboxContainer}>\n          <Tooltip\n            render={todo.done ? 'Mark as not completed' : 'Mark as completed'}\n          >\n            <Checkbox onChange={checkBoxChangeHandler} checked={todo.done} />\n          </Tooltip>\n        </div>\n        <Input\n          value={todoInputValue}\n          onChange={todoTitleInputChangeHandler}\n          onBlur={updateNewTodoTitle}\n          ref={inputRef}\n          onKeyUp={doneOnEnter}\n          todoInDetails\n        />\n        {todo.important ? (\n          <FontAwesomeIcon\n            icon={SolidStar}\n            className={Styles.impFilled}\n            onClick={impStatusChangeHandler}\n          />\n        ) : (\n          <FontAwesomeIcon\n            icon={faStar}\n            className={Styles.imp}\n            onClick={impStatusChangeHandler}\n          />\n        )}\n      </div>\n      {steps}\n      <AddStep />\n    </div>\n  ) : null;\n}\n\nexport default TodoBox;\n","import { useSetRecoilState, RecoilState } from 'recoil';\nimport { Op, todoType } from '../types';\nimport { updatLists } from '../helperFunction/updateLists';\n/**\n * custom hook for updating todos.\n * @param recoilState recoil atom\n * @returns todo list setter function\n */\nexport function useSetTasks<t extends todoType>(recoilState: RecoilState<t[]>) {\n  const setTodoList = useSetRecoilState<t[]>(recoilState);\n  /**\n   *\n   * @param newTodo todo you want to update in todo list\n   * @param operation what kind of operation you want to perform.\n   */\n  function updater(newTodo: t, operation: Op) {\n    if (operation === 'update') {\n      setTodoList((todoList) => updatLists<t>(todoList, newTodo, 'update'));\n    } else if (operation === 'add') {\n      setTodoList((todoList) => updatLists<t>(todoList, newTodo, 'add'));\n    } else {\n      setTodoList((todoList) => updatLists<t>(todoList, newTodo, 'delete'));\n    }\n  }\n  return updater;\n}\n","import { useSetTasks } from './useSetTask';\nimport { ImpTasksState } from '../../atoms/ImportantTaskAtom';\nimport { myDayState } from '../../atoms/MyDayTaskAtom';\nimport { normalTasksState } from '../../atoms/NormalTaskAtom';\nimport { planbedTasksState } from '../../atoms/plannedTasksState';\nimport { projectTasksAtom } from '../../atoms/todoInProjects';\nimport {\n  todoType,\n  myDayTodoType,\n  plannedTodoType,\n  todoInProjectType,\n} from '../types';\n\n/**\n * custom hook for add tasks in front-end. this will add todo in front-end after adding in backend.\n */\n\nexport function useSetAddTaskInFront() {\n  const updateNormaTasks = useSetTasks(normalTasksState);\n  const updatePlannedTasks = useSetTasks(planbedTasksState);\n  const updateImpTasks = useSetTasks(ImpTasksState);\n  const updateMydayTasks = useSetTasks(myDayState);\n  const updateTodoInProject = useSetTasks(projectTasksAtom);\n\n  function addHandler(\n    todo: todoType | myDayTodoType | plannedTodoType | todoInProjectType,\n  ) {\n    if (todo.normalTask) {\n      updateNormaTasks(todo, 'add');\n    } else {\n      if (todo.projectId !== undefined) {\n        // already checked for undefined\n        //@ts-ignore\n        updateTodoInProject(todo, 'add');\n      }\n    }\n    if (todo.dueDate !== undefined) {\n      // already checked for undefined\n      //@ts-ignore\n      updatePlannedTasks(todo, 'add');\n    }\n    if (todo.important !== undefined) {\n      updateImpTasks(todo, 'add');\n    }\n    if (todo.myDay !== undefined) {\n      // already checked for undefined\n      //@ts-ignore\n      updateMydayTasks(todo, 'add');\n    }\n  }\n\n  return addHandler;\n}\n","import React, { useState } from 'react';\nimport Button from '../../UI/Button/Button';\nimport Styles from './ButtonContainer.module.scss';\nimport axios from '../../../axios';\nimport { selectedTodo } from '../../../atoms/selectedTodoAtom';\nimport { useRecoilState } from 'recoil';\nimport { useDeleteTaskInFront } from '../../../utils/customHooks/useDeleteTaskInFront';\nimport { useSetNotification } from '../../../utils/customHooks/useAddNotification';\nimport { timeMessageObjCreate } from '../../../utils/helperFunction/timeoutMessage';\nimport Modal from '../../UI/Modal/Modal';\nimport { useSetAddTaskInFront } from '../../../utils/customHooks/useSetAddTasksInFront';\n\nfunction ButtonContainer() {\n  const [todo, setTodo] = useRecoilState(selectedTodo);\n  const deleteTaskFromAll = useDeleteTaskInFront();\n  const { addNotification } = useSetNotification();\n  const [showModal, setShowModal] = useState(false);\n  const addTaskToAll = useSetAddTaskInFront();\n\n  function modalCloseHandler() {\n    setShowModal(false);\n  }\n\n  function modalOpenHandler() {\n    setShowModal(true);\n  }\n  async function todoDeleteHandler() {\n    if (todo) {\n      const oldTodo = { ...todo };\n      setTodo(null);\n      deleteTaskFromAll(todo);\n      setShowModal(false);\n      try {\n        if (window.navigator.onLine) {\n          const res = await axios.patch(\n            '/api/edit/todo/delete',\n            {\n              todoId: todo.id,\n            },\n            timeMessageObjCreate('Unable to delete todo'),\n          );\n          if (res.status !== 200) {\n            addTaskToAll(oldTodo);\n          }\n        } else {\n          throw new Error('No internet connection');\n        }\n      } catch (e) {\n        addNotification(e.message, 'Network Error');\n      }\n    }\n  }\n  return (\n    <>\n      <Modal\n        modalClosed={modalCloseHandler}\n        title={todo ? todo.todoTitle : ''}\n        show={showModal}\n        deleteButtonTitle='Delete todo'\n        modalConfirmed={todoDeleteHandler}\n      />\n      <div className={Styles.container}>\n        <div className={Styles.deleteButtonContainer}>\n          <Button dimension='small' danger onClick={modalOpenHandler}>\n            Delete Todo\n          </Button>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default ButtonContainer;\n","import { useSetTasks } from './useSetTask';\nimport { ImpTasksState } from '../../atoms/ImportantTaskAtom';\nimport { myDayState } from '../../atoms/MyDayTaskAtom';\nimport { normalTasksState } from '../../atoms/NormalTaskAtom';\nimport { planbedTasksState } from '../../atoms/plannedTasksState';\nimport { projectTasksAtom } from '../../atoms/todoInProjects';\nimport {\n  todoType,\n  myDayTodoType,\n  plannedTodoType,\n  todoInProjectType,\n} from '../types';\n\n/**\n * custom hook for deleting tasks in front-end. this will delete todo in front-end after deleting in backend.\n */\n\nexport function useDeleteTaskInFront() {\n  const updateNormaTasks = useSetTasks(normalTasksState);\n  const updatePlannedTasks = useSetTasks(planbedTasksState);\n  const updateImpTasks = useSetTasks(ImpTasksState);\n  const updateMydayTasks = useSetTasks(myDayState);\n  const updateTodoInProject = useSetTasks(projectTasksAtom);\n\n  function deleteHandler(\n    todo: todoType | myDayTodoType | plannedTodoType | todoInProjectType,\n  ) {\n    if (todo.normalTask) {\n      updateNormaTasks(todo, 'delete');\n    } else {\n      if (todo.projectId) {\n        // already checked for undefined\n        //@ts-ignore\n        updateTodoInProject(todo, 'delete');\n      }\n    }\n    if (todo.dueDate) {\n      // already checked for undefined\n      //@ts-ignore\n      updatePlannedTasks(todo, 'delete');\n    }\n    if (todo.important) {\n      updateImpTasks(todo, 'delete');\n    }\n    if (todo.myDay) {\n      // already checked for undefined\n      //@ts-ignore\n      updateMydayTasks(todo, 'delete');\n    }\n  }\n\n  return deleteHandler;\n}\n","import {\n  format,\n  isFuture,\n  isToday,\n  isTomorrow,\n  isThisYear,\n  isYesterday,\n} from 'date-fns';\n/**\n * Returns formatted string for given date\n *\n * @param date Date you want to format\n *\n * @returns string from `date`.\n */\nexport function getDateString(date: Date) {\n  let text: string;\n  if (isFuture(date)) {\n    if (isToday(date)) {\n      text = 'Due Today';\n    } else if (isTomorrow(date)) {\n      text = 'Due Tomorrow';\n    } else {\n      if (isThisYear(date)) {\n        text = `due ${format(date, 'iii, MMMM d')}`;\n      } else {\n        text = `due ${format(date, 'iii, MMMM d, yyyy')}`;\n      }\n    }\n  } else {\n    if (isYesterday(date)) {\n      text = 'Overdue, Yesterday';\n    } else if (isThisYear(date)) {\n      text = `Overdue ${format(date, 'iii, MMMM d')}`;\n    } else {\n      text = `Overdue ${format(date, 'iii, MMMM d, yyyy')}`;\n    }\n  }\n  return text;\n}\n","import DatePicker from 'react-datepicker';\nimport React from 'react';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport Styles from './AddDueDate.module.scss';\n\ntype CustomInputProps = {\n  onClick?: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n};\n\nfunction CustomInput({ onClick }: CustomInputProps) {\n  return (\n    <div className={Styles.textContainer} onClick={onClick}>\n      <span className={Styles.text}>Add Due Date</span>\n    </div>\n  );\n}\n\ntype DueDateProps = {\n  changeHandler: (date: Date) => Promise<void>;\n};\n\nexport default function DueDatePicker({ changeHandler }: DueDateProps) {\n  return (\n    <DatePicker\n      onChange={changeHandler}\n      selected={null}\n      customInput={<CustomInput />}\n      minDate={new Date()}\n    />\n  );\n}\n","import React from 'react';\nimport Styles from './DueDate.module.scss';\nimport { useRecoilValue } from 'recoil';\nimport { selectedTodo } from '../../../atoms/selectedTodoAtom';\nimport CloseButton from '../CloseButton/CloseButton';\nimport { getDateString } from '../../../utils/helperFunction/getDateString';\nimport axios from '../../../axios';\nimport { todoBody } from '../../../utils/types';\nimport { useSetTaskFromTaskDetails } from '../../../utils/customHooks/useUpdateTaskFromTaskDetails';\nimport { useSetNotification } from '../../../utils/customHooks/useAddNotification';\nimport { endOfDay } from 'date-fns';\nimport DueDatePicker from '../AddDueDate/AddDueDate';\nimport { timeMessageObjCreate } from '../../../utils/helperFunction/timeoutMessage';\n\nfunction DueDate() {\n  const todo = useRecoilValue(selectedTodo);\n  const updateTaskFromDetails = useSetTaskFromTaskDetails();\n  const { addNotification } = useSetNotification();\n\n  async function removeDueDayHandler() {\n    if (todo) {\n      const oldTodo = { ...todo };\n      updateTaskFromDetails(todo, { ...todo, dueDate: undefined });\n      try {\n        if (window.navigator.onLine) {\n          const res = await axios.patch<todoBody>(\n            '/api/todo/delete/duedate',\n            {\n              todoId: todo?.id,\n            },\n            timeMessageObjCreate('We were unable to update todo'),\n          );\n          if (res.status !== 200) {\n            updateTaskFromDetails(todo, oldTodo);\n          }\n        } else {\n          throw new Error('No internet connection');\n        }\n      } catch (e) {\n        addNotification(e.message, 'Network Error');\n      }\n    }\n  }\n  async function dateChangeHandler(date: Date) {\n    if (todo) {\n      const oldTodo = { ...todo };\n      updateTaskFromDetails(todo, { ...todo, dueDate: endOfDay(date) });\n      try {\n        if (window.navigator.onLine) {\n          const res = await axios.patch<todoBody>(\n            '/api/todo/edit/duedate',\n            {\n              todoId: todo?.id,\n              dueDate: endOfDay(date).toString(),\n            },\n            timeMessageObjCreate('We were unable to update todo'),\n          );\n          if (res.status !== 200) {\n            updateTaskFromDetails(todo, oldTodo);\n          }\n        } else {\n          throw new Error('No internet connection');\n        }\n      } catch (e) {\n        addNotification(e.message, 'Network Error');\n      }\n    }\n  }\n\n  return todo?.dueDate ? (\n    <div className={Styles.container}>\n      <div className={Styles.textContainer}>\n        <span className={[Styles.text, Styles.activeText].join(' ')}>\n          {getDateString(todo.dueDate)}\n        </span>\n      </div>\n      <div className={Styles.buttonContainer}>\n        <CloseButton onClick={removeDueDayHandler} />\n      </div>\n    </div>\n  ) : (\n    <div className={Styles.dateContainer}>\n      <DueDatePicker changeHandler={dateChangeHandler} />\n    </div>\n  );\n}\n\nexport default DueDate;\n","import React from 'react';\nimport Styles from './TodoContainer.module.scss';\nimport MyDayBox from './myDayBox/myDayBox';\nimport TodoBox from './TodoBox/TodoBox';\nimport ButtonContainer from './ButtonContainer/ButtonContainer';\nimport CloseButton from './CloseButton/CloseButton';\nimport { useSetRecoilState } from 'recoil';\nimport { selectedTodo } from '../../atoms/selectedTodoAtom';\nimport DueDate from './DueDate/DueDate';\nimport { motion, AnimatePresence } from 'framer-motion';\n\nfunction Todo() {\n  const setTodo = useSetRecoilState(selectedTodo);\n  function closeHandler() {\n    setTodo(null);\n  }\n  const transition = {\n    duration: 0.2,\n  };\n  const variant = {\n    initial: {\n      opacity: 0,\n      x: 1000,\n    },\n    animate: {\n      opacity: 1,\n      x: 0,\n      transition,\n    },\n    exit: {\n      opacity: 0,\n      x: 1000,\n    },\n  };\n  return (\n    <AnimatePresence>\n      <motion.section\n        variants={variant}\n        initial='initial'\n        animate='animate'\n        exit='exit'\n        className={Styles.container}\n      >\n        <div className={Styles.close}>\n          <CloseButton onClick={closeHandler} bigger />\n        </div>\n        <TodoBox />\n        <MyDayBox />\n        <DueDate />\n        <ButtonContainer />\n      </motion.section>\n    </AnimatePresence>\n  );\n}\n\nexport default Todo;\n","import { selector } from 'recoil';\nimport { selectedTodo } from '../atoms/selectedTodoAtom';\n/**\n * info about selected todo\n */\nexport const selctedTodo = selector<boolean>({\n  key: 'selctedTodo',\n  get: ({ get }) => {\n    const selctedTodo = get(selectedTodo);\n    return selctedTodo ? true : false;\n  },\n});\n","import { selectorFamily } from 'recoil';\nimport { normalTasksState } from '../atoms/NormalTaskAtom';\nimport { TaskStatus, todoType } from '../utils/types';\n/**\n * get normal tasks by their status\n */\nexport const normalTasksMapper = selectorFamily<todoType[], TaskStatus>({\n  key: 'normalTasksMapper',\n  get:\n    (status) =>\n    ({ get }) => {\n      const tasks = get(normalTasksState);\n      if (status === 'COMPLETED') {\n        const completeTasks = tasks.filter((task) => {\n          return task.done;\n        });\n        return completeTasks;\n      } else {\n        const inCompleteTasks = tasks.filter((task) => {\n          return task.done === false;\n        });\n        return inCompleteTasks;\n      }\n    },\n});\n","import React from 'react';\nimport Styles from './Daydisplay.module.scss';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCalendar } from '@fortawesome/free-regular-svg-icons';\nimport { isToday, isPast } from 'date-fns';\nimport { getDateString } from '../../utils/helperFunction/getDateString';\ntype dateProps = {\n  date: Date;\n  completed: boolean;\n};\n\nfunction Daydisplay({ date, completed }: dateProps) {\n  const text = getDateString(date);\n  return (\n    <span\n      className={\n        !completed && isPast(date)\n          ? [Styles.due, Styles.overDue].join(' ')\n          : !completed && isToday(date)\n          ? [Styles.due, Styles.dueToday].join(' ')\n          : Styles.due\n      }\n    >\n      <FontAwesomeIcon icon={faCalendar} style={{ paddingRight: '4px' }} />\n      {text}\n    </span>\n  );\n}\n\nexport default Daydisplay;\n","import React from 'react';\nimport { stepType } from '../../utils/types';\nimport Styles from './StepDetails.module.scss';\n\ntype stepDetailsProps = {\n  steps: stepType[];\n};\n\nfunction StepDetails({ steps }: stepDetailsProps) {\n  if (steps.length > 0) {\n    let totalDone = 0;\n    steps.forEach((step) => {\n      if (step.done) {\n        totalDone++;\n      }\n    });\n    return (\n      <span className={Styles.container}>\n        {totalDone} of {steps.length}\n      </span>\n    );\n  } else {\n    return null;\n  }\n}\n\nexport default StepDetails;\n","import React from 'react';\nimport axios from '../../axios';\nimport { useSetAllTask } from '../../utils/customHooks/useSetAllTask';\nimport {\n  todoType,\n  todoBody,\n  myDayTodoType,\n  plannedTodoType,\n  editDoneStatus,\n  editImpStatus,\n  TodoFrom,\n} from '../../utils/types';\nimport Styles from './TaskItem.module.scss';\nimport Checkbox from '../UI/CheckBox/CheckBox';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faStar } from '@fortawesome/free-regular-svg-icons';\nimport { faStar as SolidStar, faSun } from '@fortawesome/free-solid-svg-icons';\nimport Daydisplay from '../Daydisplay/Daydisplay';\nimport { useSetRecoilState } from 'recoil';\nimport { selectedTodo } from '../../atoms/selectedTodoAtom';\nimport StepDetails from '../StepDetails/StepDetails';\nimport Tooltip from '../UI/Tooltip/Tooltip';\nimport { useSetNotification } from '../../utils/customHooks/useAddNotification';\nimport { useRecoilValue } from 'recoil';\nimport { projects } from '../../atoms/allProjectAtom';\nimport { timeMessageObjCreate } from '../../utils/helperFunction/timeoutMessage';\n\ntype taskItemProps = {\n  todo: todoType | myDayTodoType | plannedTodoType;\n  from?: TodoFrom;\n};\n\nfunction TaskItem({ todo, from }: taskItemProps) {\n  const setSelctedTodo = useSetRecoilState(selectedTodo);\n  const { addNotification } = useSetNotification();\n  const updateAllTasks = useSetAllTask();\n  const givenProject = useRecoilValue(projects).find(\n    (project) => project.id === todo.projectId,\n  );\n\n  function updateTodoDoneStatusBeforeSendingToDatabase(\n    newStauts: editDoneStatus,\n  ) {\n    updateAllTasks(todo, {\n      ...todo,\n      done: newStauts.done,\n    });\n  }\n\n  function updateTodoImpStatusBeforeSendingToDatabase(\n    newStauts: editImpStatus,\n  ) {\n    updateAllTasks(todo, {\n      ...todo,\n      important: newStauts.important,\n    });\n  }\n\n  async function todoDoneStatusChangeHandler(newStauts: editDoneStatus) {\n    const oldTodo = { ...todo };\n    updateTodoDoneStatusBeforeSendingToDatabase(newStauts);\n    try {\n      if (window.navigator.onLine) {\n        const res = await axios.patch<todoBody>(\n          '/api/todo/edit/done',\n          newStauts,\n          timeMessageObjCreate('We were unable to update todo'),\n        );\n        if (res.status !== 200) {\n          updateAllTasks(todo, oldTodo);\n        }\n      } else {\n        throw new Error('there is no internet connection');\n      }\n    } catch (e) {\n      addNotification(e.message, 'Newtowork Error');\n    }\n  }\n\n  async function todoImpStatusChangeHandler(newStauts: editImpStatus) {\n    const oldTodo = { ...todo };\n    updateTodoImpStatusBeforeSendingToDatabase(newStauts);\n    try {\n      if (window.navigator.onLine) {\n        const res = await axios.patch<todoBody>(\n          '/api/todo/edit/important',\n          newStauts,\n          timeMessageObjCreate('We were unable to update todo'),\n        );\n        if (res.status !== 200) {\n          updateAllTasks(todo, oldTodo);\n        }\n      } else {\n        throw new Error('there is no internet connection');\n      }\n    } catch (e) {\n      addNotification(e.message, 'Newtowork Error');\n    }\n  }\n\n  function checkBoxChangeHandler(e: React.ChangeEvent<HTMLInputElement>) {\n    todoDoneStatusChangeHandler({ todoId: todo.id, done: e.target.checked });\n  }\n\n  function impStatusChangeHandler() {\n    todoImpStatusChangeHandler({ todoId: todo.id, important: !todo.important });\n  }\n  function taskSelectedHandler() {\n    setSelctedTodo(todo);\n  }\n  return (\n    <div className={Styles.container}>\n      <div className={Styles.checkboxContainer}>\n        <Tooltip\n          render={todo.done ? 'Mark as not completed' : 'Mark as completed'}\n        >\n          <Checkbox onChange={checkBoxChangeHandler} checked={todo.done} />\n        </Tooltip>\n      </div>\n      <div className={Styles.textContainer} onClick={taskSelectedHandler}>\n        <div\n          className={todo.done ? Styles.doneText : Styles.text}\n          style={\n            (todo.myDay && from !== 'MY_DAY') ||\n            (todo.dueDate && from !== 'PLANNED')\n              ? { lineHeight: '18px' }\n              : undefined\n          }\n        >\n          {todo.todoTitle}\n        </div>\n        <div>\n          {from === 'PROJECT' || from === 'TASK' ? (\n            ''\n          ) : (\n            <span className={Styles.fromTaskOrProject}>\n              {todo.normalTask ? 'Tasks' : givenProject?.projectName}\n            </span>\n          )}\n          {todo.myDay && from !== 'MY_DAY' ? (\n            <span className={Styles.myday}>\n              <FontAwesomeIcon icon={faSun} style={{ marginRight: '4px' }} />\n              My Day\n            </span>\n          ) : (\n            ''\n          )}\n          <StepDetails steps={todo.steps} />\n          {todo.dueDate && from !== 'PLANNED' ? (\n            <Daydisplay date={todo.dueDate} completed={todo.done} />\n          ) : (\n            ''\n          )}\n        </div>\n      </div>\n      {todo.important ? (\n        <FontAwesomeIcon\n          icon={SolidStar}\n          className={Styles.impFilled}\n          onClick={impStatusChangeHandler}\n        />\n      ) : (\n        <FontAwesomeIcon\n          icon={faStar}\n          className={Styles.imp}\n          onClick={impStatusChangeHandler}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default TaskItem;\n","import React, { useState } from 'react';\nimport Styles from './Accordion.module.scss';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronRight } from '@fortawesome/free-solid-svg-icons';\nimport { motion, AnimatePresence, AnimateSharedLayout } from 'framer-motion';\n\ntype AccordionProps = {\n  title: string;\n  children: React.ReactNode[];\n};\n\nfunction Accordion({ title, children }: AccordionProps) {\n  const [active, setActiveState] = useState(false);\n\n  function toggleAccordion() {\n    setActiveState((active) => !active);\n  }\n  const variant = {\n    initial: {\n      opacity: 0,\n    },\n    animate: {\n      opacity: 1,\n    },\n    exit: {\n      opacity: 0,\n    },\n  };\n\n  return (\n    <AnimateSharedLayout>\n      <motion.section className={Styles.accordionSection}>\n        <motion.button\n          layout\n          className={\n            active ? [Styles.accordion, active].join(' ') : Styles.accordion\n          }\n          onClick={toggleAccordion}\n        >\n          <motion.span layout className={Styles.icon}>\n            <FontAwesomeIcon\n              icon={faChevronRight}\n              className={active ? Styles.rotate : 'none'}\n            />\n          </motion.span>\n          <motion.h2 layout className={Styles.accordionTitle}>\n            {title}\n          </motion.h2>\n        </motion.button>\n        <AnimatePresence>\n          {active && (\n            <motion.div\n              initial='initial'\n              animate='animate'\n              exit='exit'\n              variants={variant}\n              className={Styles.accordionContent}\n            >\n              {children}\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </motion.section>\n    </AnimateSharedLayout>\n  );\n}\n\nexport default Accordion;\n","import React from 'react';\nimport AddTodo from '../AddTodo/AddTodo';\nimport Header from '../UI/Header/Header';\nimport Styles from './TaskContainer.module.scss';\nimport { todoBody } from '../../utils/types';\nimport Todo from '../Todo/Todo';\nimport { selctedTodo } from '../../selector/selectedTodoStatus';\nimport { useRecoilValue } from 'recoil';\nimport { useSetNotification } from '../../utils/customHooks/useAddNotification';\nimport { normalTasksMapper } from '../../selector/normalTasksMapper';\nimport TaskItem from '../TaskItem/TaskItem';\nimport Accordion from '../UI/Accordion/Accordion';\nimport axios from '../../axios';\nimport { useSetAddTaskInFront } from '../../utils/customHooks/useSetAddTasksInFront';\n\nfunction TaskContainer() {\n  const todoStatus = useRecoilValue(selctedTodo);\n  const addTaskInFront = useSetAddTaskInFront();\n  const { addNotification } = useSetNotification();\n  const inCompletedTodoList = useRecoilValue(normalTasksMapper('INCOMPLETED'));\n  const completedTodoList = useRecoilValue(normalTasksMapper('COMPLETED'));\n\n  const completedTaskList = completedTodoList.map((task) => (\n    <TaskItem todo={task} key={task.id} from='TASK' />\n  ));\n\n  const inCompletedTaskList = inCompletedTodoList.map((todo) => {\n    return <TaskItem todo={todo} key={todo.id} from='TASK' />;\n  });\n\n  async function addTodoHandler(todoTitle: string) {\n    try {\n      if (window.navigator.onLine) {\n        const res = await axios.post<todoBody>(\n          '/api/todo/new',\n          { todoTitle },\n          { timeoutErrorMessage: 'We were unable to add todo' },\n        );\n        if (res.status === 200) {\n          const newTodo = {\n            ...res.data,\n            createdAt: new Date(res.data.createdAt),\n            dueDate: undefined,\n          };\n          addTaskInFront(newTodo);\n        }\n      } else {\n        throw new Error('No internet connection');\n      }\n    } catch (e) {\n      addNotification(e.message, 'NetWork Error');\n    }\n  }\n  return (\n    <>\n      <section className={Styles.container}>\n        <header>\n          <Header displayTitle='Tasks' />\n          <AddTodo onAddTodo={addTodoHandler} placeholder='Add a Task' />\n        </header>\n        <main>\n          <div>{inCompletedTaskList}</div>\n          <Accordion title='Completed Tasks'>{completedTaskList}</Accordion>\n        </main>\n      </section>\n      {todoStatus ? <Todo /> : null}\n    </>\n  );\n}\n\nexport default TaskContainer;\n","import { selectorFamily } from 'recoil';\nimport { myDayState } from '../atoms/MyDayTaskAtom';\nimport { myDayTodoType, TaskStatus } from '../utils/types';\n/**\n * get myday tasks tasks by their status\n */\nexport const myDayTaskMapper = selectorFamily<myDayTodoType[], TaskStatus>({\n  key: 'myDayTaskMapper',\n  get:\n    (status) =>\n    ({ get }) => {\n      const tasks = get(myDayState);\n      if (status === 'COMPLETED') {\n        const completeTasks = tasks.filter((task) => {\n          return task.done;\n        });\n        return completeTasks;\n      } else {\n        const inCompleteTasks = tasks.filter((task) => {\n          return task.done === false;\n        });\n        return inCompleteTasks;\n      }\n    },\n});\n","import React from 'react';\nimport Styles from './MyDayContainer.module.scss';\nimport Header from '../UI/Header/Header';\nimport axios from '../../axios';\nimport AddTodo from '../AddTodo/AddTodo';\nimport { MydayTodoBodyType } from '../../utils/types';\nimport { useRecoilValue } from 'recoil';\nimport { selectedTodo } from '../../atoms/selectedTodoAtom';\nimport Todo from '../Todo/Todo';\nimport { useSetNotification } from '../../utils/customHooks/useAddNotification';\nimport { myDayTaskMapper } from '../../selector/myDayTaskMapper';\nimport TaskItem from '../TaskItem/TaskItem';\nimport Accordion from '../UI/Accordion/Accordion';\nimport { timeMessageObjCreate } from '../../utils/helperFunction/timeoutMessage';\nimport { useSetAddTaskInFront } from '../../utils/customHooks/useSetAddTasksInFront';\n\nfunction MydayContainer() {\n  const { addNotification } = useSetNotification();\n  const addTaskInFront = useSetAddTaskInFront();\n  const todoStatus = useRecoilValue(selectedTodo);\n\n  const completedTodoList = useRecoilValue(myDayTaskMapper('COMPLETED'));\n  const completedTaskList = completedTodoList.map((task) => (\n    <TaskItem todo={task} key={task.id} from='MY_DAY' />\n  ));\n\n  const inCompleteTodoList = useRecoilValue(myDayTaskMapper('INCOMPLETED'));\n  const inCompleteTaskList = inCompleteTodoList.map((task) => (\n    <TaskItem todo={task} key={task.id} from='MY_DAY' />\n  ));\n\n  async function addTodoHandler(todoTitle: string) {\n    try {\n      if (window.navigator.onLine) {\n        const res = await axios.post<MydayTodoBodyType>(\n          '/api/todo/new',\n          {\n            todoTitle,\n            myDay: true,\n          },\n          timeMessageObjCreate('We were unable to add todo'),\n        );\n        if (res.status === 200) {\n          const newTodo = {\n            ...res.data,\n            createdAt: new Date(res.data.createdAt),\n            dueDate: undefined,\n          };\n          addTaskInFront(newTodo);\n        }\n      } else {\n        throw new Error('No internet connection');\n      }\n    } catch (e) {\n      addNotification(e.message, 'NetWork Error');\n    }\n  }\n\n  return (\n    <>\n      <section className={Styles.container}>\n        <header>\n          <Header displayTitle='My Day' />\n          <AddTodo onAddTodo={addTodoHandler} placeholder='Add a Myday Task' />\n        </header>\n        <main>\n          <div>{inCompleteTaskList}</div>\n          <Accordion title='Completed Tasks'>{completedTaskList}</Accordion>\n        </main>\n      </section>\n      {todoStatus ? <Todo /> : null}\n    </>\n  );\n}\n\nexport default MydayContainer;\n","import { selectorFamily } from 'recoil';\nimport { planbedTasksState } from '../atoms/plannedTasksState';\nimport { DayStatus, plannedTodoType, TaskStatus } from '../utils/types';\nimport { isTomorrow, isToday, isPast } from 'date-fns';\n\n/**\n * get tasks with duedates by their status\n */\nexport const plannedTasksMapper = selectorFamily<\n  plannedTodoType[],\n  DayStatus | TaskStatus\n>({\n  key: 'plannedTasksMApper',\n  get:\n    (status) =>\n    ({ get }) => {\n      const tasks = get(planbedTasksState);\n      if (status === 'tommorrow') {\n        const tomorrowTasks = tasks.filter((task) => {\n          return isTomorrow(task.dueDate);\n        });\n        return tomorrowTasks;\n      } else if (status === 'today') {\n        const todaysTasks = tasks.filter((task) => {\n          return isToday(task.dueDate);\n        });\n        return todaysTasks;\n      } else if (status === 'later') {\n        return tasks.filter((task) => {\n          return (\n            task.done === false &&\n            !isPast(task.dueDate) &&\n            !isToday(task.dueDate) &&\n            !isTomorrow(task.dueDate)\n          );\n        });\n      } else if (status === 'INCOMPLETED') {\n        const inCompleteTasks = tasks.filter((task) => {\n          return task.done === false;\n        });\n        return inCompleteTasks;\n      } else {\n        const previousTasks = tasks.filter((task) => {\n          return isPast(task.dueDate) && !task.done;\n        });\n        return previousTasks;\n      }\n    },\n});\n","import React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { plannedTasksMapper } from '../../../selector/plannedTaskMapper';\nimport TaskItem from '../../TaskItem/TaskItem';\nimport Accordion from '../../UI/Accordion/Accordion';\n\nfunction TododList() {\n  const todayTasks = useRecoilValue(plannedTasksMapper('today'));\n  const previousTasks = useRecoilValue(plannedTasksMapper('previous'));\n  const laterTasks = useRecoilValue(plannedTasksMapper('later'));\n  const tommorrowTasks = useRecoilValue(plannedTasksMapper('tommorrow'));\n  const todayList = todayTasks.map((todo) => {\n    return <TaskItem todo={todo} key={todo.id} from='PLANNED' />;\n  });\n  const previousTaskList = previousTasks.map((todo) => {\n    return <TaskItem key={todo.id} todo={todo} from='PLANNED' />;\n  });\n  const tommorrowTasksList = tommorrowTasks.map((todo) => {\n    return <TaskItem key={todo.id} todo={todo} from='PLANNED' />;\n  });\n  const laterTasksList = laterTasks.map((todo) => {\n    return <TaskItem key={todo.id} todo={todo} from='TASK' />;\n  });\n  return (\n    <div>\n      {todayList.length > 0 ? (\n        <Accordion title='Today'>{todayList}</Accordion>\n      ) : null}\n      {tommorrowTasksList.length > 0 ? (\n        <Accordion title='Tommorrow'>{tommorrowTasksList}</Accordion>\n      ) : null}\n      {laterTasksList.length > 0 ? (\n        <Accordion title='Later'>{laterTasksList}</Accordion>\n      ) : null}\n      {previousTaskList.length > 0 ? (\n        <Accordion title='Earlier'>{previousTaskList}</Accordion>\n      ) : null}\n    </div>\n  );\n}\n\nexport default TododList;\n","import React from 'react';\nimport Styles from './PlannedContainer.module.scss';\nimport Header from '../UI/Header/Header';\nimport axios from 'axios';\nimport AddTodo from '../AddTodo/AddTodo';\nimport { plannedTodoBodyType } from '../../utils/types';\nimport TodoList from './TodoList/TododList';\nimport { endOfToday } from 'date-fns';\nimport { useRecoilValue } from 'recoil';\nimport { selectedTodo } from '../../atoms/selectedTodoAtom';\nimport Todo from '../Todo/Todo';\nimport { useSetNotification } from '../../utils/customHooks/useAddNotification';\nimport { timeMessageObjCreate } from '../../utils/helperFunction/timeoutMessage';\nimport { useSetAddTaskInFront } from '../../utils/customHooks/useSetAddTasksInFront';\n\nfunction PlannedContainer() {\n  const { addNotification } = useSetNotification();\n  const todoStatus = useRecoilValue(selectedTodo);\n  const addTaskInFront = useSetAddTaskInFront();\n\n  async function addTodoHandler(todoTitle: string) {\n    try {\n      if (window.navigator.onLine) {\n        const res = await axios.post<plannedTodoBodyType>(\n          '/api/todo/new',\n          {\n            todoTitle,\n            dueDate: endOfToday(),\n          },\n          timeMessageObjCreate('We were unable to add todo'),\n        );\n        if (res.status === 200) {\n          const newData = {\n            ...res.data,\n            createdAt: new Date(res.data.createdAt),\n            dueDate: new Date(res.data.dueDate),\n          };\n          addTaskInFront(newData);\n        }\n      } else {\n        throw new Error('No internet connection');\n      }\n    } catch (e) {\n      addNotification(e.message, 'NetWork Error');\n    }\n  }\n\n  return (\n    <>\n      <section className={Styles.container}>\n        <header>\n          <Header displayTitle='Planned' />\n          <AddTodo\n            onAddTodo={addTodoHandler}\n            placeholder='Add a task due today'\n          />\n        </header>\n        <main>\n          <TodoList />\n        </main>\n      </section>\n      {todoStatus ? <Todo /> : null}\n    </>\n  );\n}\n\nexport default PlannedContainer;\n","import { selectorFamily } from 'recoil';\nimport { ImpTasksState } from '../atoms/ImportantTaskAtom';\nimport { TaskStatus, todoType } from '../utils/types';\n/**\n * get important tasks by their status\n */\nexport const impTasksMapper = selectorFamily<todoType[], TaskStatus>({\n  key: 'impTasksMapper',\n  get:\n    (status) =>\n    ({ get }) => {\n      const tasks = get(ImpTasksState);\n\n      if (status === 'COMPLETED') {\n        const completeTasks = tasks.filter((task) => {\n          return task.done;\n        });\n        return completeTasks;\n      } else {\n        const inCompleteTasks = tasks.filter((task) => {\n          return task.done === false;\n        });\n        return inCompleteTasks;\n      }\n    },\n});\n","import React from 'react';\nimport AddTodo from '../AddTodo/AddTodo';\nimport Header from '../UI/Header/Header';\nimport axios from 'axios';\nimport { todoBody } from '../../utils/types';\nimport Styles from './ImportantContainer.module.scss';\nimport { useRecoilValue } from 'recoil';\nimport { selectedTodo } from '../../atoms/selectedTodoAtom';\nimport Todo from '../Todo/Todo';\nimport { useSetNotification } from '../../utils/customHooks/useAddNotification';\nimport { impTasksMapper } from '../../selector/impTasksMapper';\nimport TaskItem from '../TaskItem/TaskItem';\nimport Accordion from '../UI/Accordion/Accordion';\nimport { timeMessageObjCreate } from '../../utils/helperFunction/timeoutMessage';\nimport { useSetAddTaskInFront } from '../../utils/customHooks/useSetAddTasksInFront';\n\nfunction Important() {\n  const { addNotification } = useSetNotification();\n  const addTaskInFront = useSetAddTaskInFront();\n  const todoStatus = useRecoilValue(selectedTodo);\n  const completedTodoList = useRecoilValue(impTasksMapper('COMPLETED'));\n  const completedTaskList = completedTodoList.map((task) => (\n    <TaskItem todo={task} key={task.id} />\n  ));\n\n  const inCompleteTodoList = useRecoilValue(impTasksMapper('INCOMPLETED'));\n  const inCompleteTaskList = inCompleteTodoList.map((task, index) => (\n    <TaskItem todo={task} key={index} />\n  ));\n\n  async function addTodoHandler(todoTitle: string) {\n    try {\n      if (window.navigator.onLine) {\n        const res = await axios.post<todoBody>(\n          '/api/todo/new',\n          {\n            todoTitle,\n            important: true,\n          },\n          timeMessageObjCreate('We were unable to add todo'),\n        );\n        if (res.status === 200) {\n          const newTodo = {\n            ...res.data,\n            createdAt: new Date(res.data.createdAt),\n            dueDate: undefined,\n          };\n          addTaskInFront(newTodo);\n        }\n      } else {\n        throw new Error('No internet connection');\n      }\n    } catch (e) {\n      addNotification(e.message, 'NetWork Error');\n    }\n  }\n\n  return (\n    <>\n      <section className={Styles.container}>\n        <header>\n          <Header displayTitle='Important' />\n          <AddTodo placeholder='Add Task' onAddTodo={addTodoHandler} />\n        </header>\n        <main>\n          <div>{inCompleteTaskList}</div>\n          <Accordion title='Completed Important Tasks'>\n            {completedTaskList}\n          </Accordion>\n        </main>\n      </section>\n      {todoStatus ? <Todo /> : null}\n    </>\n  );\n}\n\nexport default Important;\n","export default __webpack_public_path__ + \"static/media/plusPurple.20652416.svg\";","export default __webpack_public_path__ + \"static/media/plusGrey.95d21f0a.svg\";","import React, { useState, useRef } from 'react';\nimport Input from '../UI/Input/Input';\nimport Styles from './AddProject.module.scss';\nimport plus from '../../utils/svg/plusPurple.svg';\nimport focusedPlus from '../../utils/svg/plusGrey.svg';\nimport axios from '../../axios';\nimport { project } from '../../utils/types';\nimport produce from 'immer';\nimport { projects } from '../../atoms/allProjectAtom';\nimport { useSetRecoilState } from 'recoil';\nimport { useSetNotification } from '../../utils/customHooks/useAddNotification';\nimport { useHistory } from 'react-router-dom';\nimport { timeMessageObjCreate } from '../../utils/helperFunction/timeoutMessage';\n\nfunction AddProject() {\n  const [projectName, setProjectName] = useState('');\n  const setProject = useSetRecoilState(projects);\n  const [inputFocused, setInputFocused] = useState(false);\n  const inputRef = useRef<HTMLInputElement | null>(null);\n  const { addNotification } = useSetNotification();\n  const history = useHistory();\n\n  function projectNameChangeHandler(e: React.ChangeEvent<HTMLInputElement>) {\n    setProjectName(e.target.value);\n  }\n\n  async function projectAddHandler() {\n    try {\n      if (window.navigator.onLine) {\n        const res = await axios.post<project>(\n          '/api/project/new',\n          {\n            projectName,\n          },\n          timeMessageObjCreate('We were unable to add project'),\n        );\n        if (res.status === 200) {\n          setProject((projectList) =>\n            produce(projectList, (draft) => {\n              draft.push(res.data);\n            }),\n          );\n          history.push(`/project/${res.data.id}`);\n        }\n      } else {\n        throw new Error('No internet connection');\n      }\n    } catch (e) {\n      addNotification(e.message, 'NetWork Error');\n    }\n  }\n\n  function enterHandler(e: React.KeyboardEvent<HTMLInputElement>) {\n    if (e.key === 'Enter') {\n      setProjectName('');\n      inputRef.current?.blur();\n      if (projectName.trim()) {\n        projectAddHandler();\n      }\n    }\n  }\n  function inputFocusedHandler() {\n    setInputFocused(true);\n  }\n  function inputBlurHandler() {\n    setInputFocused(false);\n  }\n\n  function imgClickHandler() {\n    inputRef.current?.focus();\n  }\n\n  return (\n    <div className={Styles.container}>\n      <div className={Styles.plusContainer} onClick={imgClickHandler}>\n        <img\n          src={inputFocused ? focusedPlus : plus}\n          alt=''\n          className={Styles.plus}\n        />\n      </div>\n      <Input\n        ref={inputRef}\n        onFocus={inputFocusedHandler}\n        onBlur={inputBlurHandler}\n        placeholder='New list'\n        addProject\n        value={projectName}\n        onChange={projectNameChangeHandler}\n        onKeyUp={enterHandler}\n      />\n    </div>\n  );\n}\n\nexport default AddProject;\n","export default __webpack_public_path__ + \"static/media/list-bullet.07ba5258.svg\";","import { selectorFamily } from 'recoil';\nimport { projectTasksAtom } from '../atoms/todoInProjects';\nimport { TaskStatus, todoInProjectType } from '../utils/types';\n\ntype getParams = {\n  projectId: string;\n  taskdone: TaskStatus;\n};\n/**\n * you can get tasks in given project by their status\n */\nexport const tasksInGivenProject = selectorFamily<\n  todoInProjectType[],\n  getParams\n>({\n  key: 'tasksInGivenProject',\n  get:\n    ({ projectId, taskdone }) =>\n    ({ get }) => {\n      const tasks = get(projectTasksAtom);\n      if (taskdone === 'COMPLETED') {\n        const projectTasks = tasks.filter((task) => {\n          return task.projectId === projectId && task.done;\n        });\n        return projectTasks;\n      } else {\n        const projectTasks = tasks.filter((task) => {\n          return task.projectId === projectId && !task.done;\n        });\n        return projectTasks;\n      }\n    },\n});\n","import React from 'react';\nimport { project } from '../../../../utils/types';\nimport projectImage from '../../../../utils/svg/list-bullet.svg';\nimport Styles from './ProjectItem.module.scss';\nimport { NavLink } from 'react-router-dom';\nimport { tasksInGivenProject } from '../../../../selector/getTaskByProject';\nimport { useRecoilValue } from 'recoil';\ntype projectItemProps = {\n  project: project;\n};\n\nfunction ProjectItem({ project: { id, projectName } }: projectItemProps) {\n  const notification = useRecoilValue(\n    tasksInGivenProject({ projectId: id, taskdone: 'INCOMPLETED' }),\n  ).length;\n  return (\n    <li>\n      <NavLink\n        to={`/project/${id}`}\n        className={Styles.container}\n        activeClassName={Styles.active}\n      >\n        <div>\n          <img className={Styles.img} src={projectImage} alt='' />\n          <span className={Styles.text}>{projectName}</span>\n        </div>\n        <span className={Styles.notification}>\n          {notification > 0 ? `${notification}` : ''}\n        </span>\n      </NavLink>\n    </li>\n  );\n}\n\nexport default ProjectItem;\n","import React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { projects } from '../../../atoms/allProjectAtom';\nimport ProjectItem from './ProjectItem/ProjectItem';\nfunction ProjectList() {\n  const projectArray = useRecoilValue(projects);\n  const projectLis = projectArray.map((project) => (\n    <ProjectItem project={project} key={project.id} />\n  ));\n  return <ul style={{ listStyle: 'none' }}>{projectLis}</ul>;\n}\n\nexport default ProjectList;\n","import React from 'react';\nimport Styles from './LeftSidebar.module.scss';\nimport { NavLink } from 'react-router-dom';\nimport { normalTasksMapper } from '../../selector/normalTasksMapper';\nimport { impTasksMapper } from '../../selector/impTasksMapper';\nimport { myDayTaskMapper } from '../../selector/myDayTaskMapper';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSun, faHome } from '@fortawesome/free-solid-svg-icons';\nimport { faStar, faCalendar } from '@fortawesome/free-regular-svg-icons';\n\nimport { useRecoilValue } from 'recoil';\nimport AddProject from '../AddProject/AddProject';\nimport ProjectList from '../AddProject/ProjectList/ProjectList';\nimport { plannedTasksMapper } from '../../selector/plannedTaskMapper';\nfunction LeftSidebar() {\n  const inCompleteNormalTasksList = useRecoilValue(\n    normalTasksMapper('INCOMPLETED'),\n  );\n  const inCompletePlannedTasksList = useRecoilValue(\n    plannedTasksMapper('INCOMPLETED'),\n  );\n  const inCompleteImpTasksList = useRecoilValue(impTasksMapper('INCOMPLETED'));\n  const inCompleteMyDayTasksList = useRecoilValue(\n    myDayTaskMapper('INCOMPLETED'),\n  );\n  return (\n    <section className={Styles.container}>\n      <ul className={Styles.itemContainer}>\n        <li>\n          <NavLink\n            className={Styles.item}\n            to='/myday'\n            activeClassName={Styles.active}\n            exact\n          >\n            <div>\n              <FontAwesomeIcon\n                icon={faSun}\n                className={Styles.icon}\n                style={{ marginLeft: '2px' }}\n              />\n              <span className={Styles.text}>My Day</span>\n            </div>\n            <span className={Styles.notification}>\n              {inCompleteMyDayTasksList.length > 0\n                ? `${inCompleteMyDayTasksList.length}`\n                : ''}\n            </span>\n          </NavLink>\n        </li>\n        <li>\n          <NavLink\n            className={Styles.item}\n            to='/important'\n            activeClassName={Styles.active}\n            exact\n          >\n            <div>\n              <FontAwesomeIcon icon={faStar} className={Styles.icon} />\n              <span className={Styles.text}>Important</span>\n            </div>\n            <span className={Styles.notification}>\n              {inCompleteImpTasksList.length > 0\n                ? `${inCompleteImpTasksList.length}`\n                : ''}\n            </span>\n          </NavLink>\n        </li>\n        <li>\n          <NavLink\n            to='/planned'\n            className={Styles.item}\n            activeClassName={Styles.active}\n            exact\n          >\n            <div>\n              <FontAwesomeIcon\n                icon={faCalendar}\n                className={Styles.icon}\n                style={{ marginLeft: '1px' }}\n              />\n              <span className={Styles.text} style={{ marginLeft: '3px' }}>\n                Planned\n              </span>\n            </div>\n            <span className={Styles.notification}>\n              {inCompletePlannedTasksList.length > 0\n                ? `${inCompletePlannedTasksList.length}`\n                : ''}\n            </span>\n          </NavLink>\n        </li>\n        <li>\n          <NavLink\n            to='/tasks'\n            exact\n            className={Styles.item}\n            activeClassName={Styles.active}\n          >\n            <div>\n              <FontAwesomeIcon icon={faHome} className={Styles.icon} />\n              <span className={Styles.text}>Tasks</span>\n            </div>\n            <span className={Styles.notification}>\n              {inCompleteNormalTasksList.length > 0\n                ? `${inCompleteNormalTasksList.length}`\n                : ''}\n            </span>\n          </NavLink>\n        </li>\n      </ul>\n      <ProjectList />\n      <AddProject />\n    </section>\n  );\n}\n\nexport default LeftSidebar;\n","import React from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { createPortal } from 'react-dom';\nimport { useRecoilState } from 'recoil';\nimport { notificationAtom } from '../../../atoms/NotificationAtom';\nimport CloseButton from '../../Todo/CloseButton/CloseButton';\nimport Styles from './NotificationModule.module.scss';\nimport produce from 'immer';\n\nexport default function NotificationList() {\n  const [notificationList, setNotificationList] = useRecoilState(\n    notificationAtom,\n  );\n  let el = document.querySelector('.notificationContainer');\n  if (!el) {\n    el = document.createElement('div');\n    el.className = 'notificationContainer';\n    document.body.appendChild(el);\n  }\n\n  function removeHandler(id: string) {\n    setNotificationList((notificationList) => {\n      const newNotificationList = produce(notificationList, (draft) => {\n        draft.splice(\n          draft.findIndex((notifitcation) => notifitcation.id === id),\n          1,\n        );\n      });\n      return newNotificationList;\n    });\n  }\n  return createPortal(\n    <ul className={Styles.ulContainer}>\n      <AnimatePresence>\n        {notificationList.map((notification, index) => {\n          return (\n            <motion.li\n              className={Styles.notifcation}\n              key={notification.id}\n              initial={{ opacity: 0, y: 50, scale: 0.3 }}\n              animate={{ opacity: 1, y: 0, scale: 1 }}\n              exit={{\n                opacity: 0,\n                scale: 0.5,\n                x: 100,\n              }}\n              transition={{ duration: 0.2 }}\n            >\n              <div className={Styles.closeContainer}>\n                <CloseButton\n                  bigger\n                  onClick={() => {\n                    removeHandler(notification.id);\n                  }}\n                />\n              </div>\n              <p className={Styles.message}>{notification.message}</p>\n              <p className={Styles.type}>{notification.type}</p>\n            </motion.li>\n          );\n        })}\n      </AnimatePresence>\n    </ul>,\n    el,\n  );\n}\n","import React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { tasksInGivenProject } from '../../../selector/getTaskByProject';\nimport TaskItem from '../../TaskItem/TaskItem';\nimport { project } from '../../../utils/types';\n\ntype todoListProps = {\n  project: project;\n};\n\nfunction TodoList({ project }: todoListProps) {\n  const inCompleteTasks = useRecoilValue(\n    tasksInGivenProject({\n      projectId: project.id,\n      taskdone: 'INCOMPLETED',\n    }),\n  );\n  const inCompleteTaskList = inCompleteTasks.map((task) => (\n    <TaskItem todo={task} key={task.id} from='PROJECT' />\n  ));\n  return <div>{inCompleteTaskList}</div>;\n}\n\nexport default React.memo(TodoList);\n","import React from 'react';\nimport { tasksInGivenProject } from '../../../selector/getTaskByProject';\nimport { useRecoilValue } from 'recoil';\nimport TaskItem from '../../TaskItem/TaskItem';\nimport Accordion from '../../UI/Accordion/Accordion';\nimport { project } from '../../../utils/types';\n\ntype completedTasksProps = {\n  project: project;\n};\n\nfunction CompletedTasks({ project }: completedTasksProps) {\n  const completedTask = useRecoilValue(\n    tasksInGivenProject({\n      projectId: project.id,\n      taskdone: 'COMPLETED',\n    }),\n  );\n  const completedTaskList = completedTask.map((task) => (\n    <TaskItem todo={task} key={task.id} from='PROJECT' />\n  ));\n  return (\n    <div>\n      <Accordion title='Completed Tasks'>{completedTaskList}</Accordion>\n    </div>\n  );\n}\n\nexport default React.memo(CompletedTasks);\n","export default __webpack_public_path__ + \"static/media/dots-horizontal.850b719b.svg\";","import React, { useRef, useEffect } from 'react';\nimport Styles from './ProjectMenu.module.scss';\ntype projectMenu = {\n  show: boolean;\n  onClickOutside: () => void;\n  onClickDelete?: () => Promise<void>;\n};\n\nfunction ProjectMenu({ show, onClickOutside, onClickDelete }: projectMenu) {\n  const menuRef = useRef<HTMLUListElement | null>(null);\n  useEffect(() => {\n    function clickOutSideHandler(e: MouseEvent) {\n      //@ts-ignore\n      if (menuRef.current && !menuRef.current.contains(e.target)) {\n        onClickOutside();\n      }\n    }\n\n    document.addEventListener('mousedown', clickOutSideHandler);\n    return () => {\n      document.removeEventListener('mousedown', clickOutSideHandler);\n    };\n  }, [onClickOutside]);\n  return show ? (\n    <ul className={Styles.dropdownMenu} ref={menuRef}>\n      <li className={Styles.content}>Rename List</li>\n      <li\n        className={[Styles.content, Styles.contentDanger].join(' ')}\n        onClick={onClickDelete}\n      >\n        Delete List\n      </li>\n    </ul>\n  ) : null;\n}\n\nexport default ProjectMenu;\n","import React, { useRef } from 'react';\nimport { project } from '../../utils/types';\nimport axios from '../../axios';\nimport Styles from './ProjectContainer.module.scss';\nimport { projects } from '../../atoms/allProjectAtom';\nimport produce from 'immer';\nimport { useSetNotification } from '../../utils/customHooks/useAddNotification';\nimport { useSetRecoilState } from 'recoil';\n\ntype projectTitleProps = {\n  inputValue: string | undefined;\n  onChangeInput: (val: string) => void;\n  initialInputValue: string | undefined;\n  project: project | undefined;\n  onHideInput: () => void;\n};\n\nfunction ProjectTitle({\n  inputValue,\n  onChangeInput,\n  initialInputValue,\n  project,\n  onHideInput,\n}: projectTitleProps) {\n  const inputRef = useRef<HTMLInputElement | null>(null);\n  const setProjects = useSetRecoilState(projects);\n  const { addNotification } = useSetNotification();\n\n  function inputChangeHandler(e: React.ChangeEvent<HTMLInputElement>) {\n    onChangeInput(e.target.value);\n  }\n\n  function enterHandler(e: React.KeyboardEvent<HTMLInputElement>) {\n    if (e.key === 'Enter' && !e.altKey && !e.shiftKey && !e.ctrlKey) {\n      inputRef.current?.blur();\n    }\n  }\n\n  // storing Value\n  async function inputBlurHandler() {\n    if (inputValue?.trim()) {\n      try {\n        if (window.navigator.onLine) {\n          const res = await axios.patch<project>(\n            '/api/project',\n            {\n              updatedProjectName: inputValue.trim(),\n              projectId: project?.id,\n            },\n            { timeoutErrorMessage: 'unable to update list title' },\n          );\n          if (res.status === 200) {\n            setProjects((projects) =>\n              produce(projects, (draft) => {\n                const editIndex = draft.findIndex(\n                  (givenProject) => givenProject.id === res.data.id,\n                );\n                if (editIndex > -1) {\n                  draft[editIndex].projectName = res.data.projectName;\n                }\n              }),\n            );\n            onChangeInput(res.data.projectName);\n          }\n        } else {\n          throw new Error('there is no internet connection');\n        }\n      } catch (e) {\n        addNotification(e.message, 'Newtowork Error');\n      }\n    } else {\n      if (initialInputValue) {\n        onChangeInput(initialInputValue);\n      }\n    }\n    onHideInput();\n  }\n\n  return (\n    <input\n      type='text'\n      ref={inputRef}\n      value={inputValue}\n      onBlur={inputBlurHandler}\n      onChange={inputChangeHandler}\n      onKeyUp={enterHandler}\n      className={Styles.projectTitle}\n      size={inputValue ? inputValue.length - 1 : 0}\n      maxLength={255}\n      autoFocus\n    />\n  );\n}\n\nexport default ProjectTitle;\n","import React, { useState, useCallback, useEffect } from 'react';\nimport Styles from './ProjectContainer.module.scss';\nimport { useParams, useHistory } from 'react-router-dom';\nimport { useRecoilState, useSetRecoilState } from 'recoil';\nimport { useSetTasks } from '../../utils/customHooks/useSetTask';\nimport { projects } from '../../atoms/allProjectAtom';\nimport AddTodo from '../AddTodo/AddTodo';\nimport axios from '../../axios';\nimport { useSetNotification } from '../../utils/customHooks/useAddNotification';\nimport { todoBodyInProjectType } from '../../utils/types';\nimport TodoList from './TodoList/TodoList';\nimport CompletedTodoList from './CompletedTodoList/CompletedTodoList';\nimport { projectTasksAtom } from '../../atoms/todoInProjects';\nimport dots from '../../utils/svg/dots-horizontal.svg';\nimport ProjectMenu from './ProjectMenu/ProjectMenu';\nimport produce from 'immer';\nimport ProjectTitle from './ProjectTitle';\nimport Header from '../UI/Header/Header';\n\ntype paramTypes = {\n  projectId: string;\n};\n\nfunction ProjectContainer() {\n  const { projectId } = useParams<paramTypes>();\n  const history = useHistory();\n  const [allProjects, setAllProject] = useRecoilState(projects);\n  const { addNotification } = useSetNotification();\n  const setTasksInProject = useSetTasks(projectTasksAtom);\n  const setTasksAfterDeleteingProject = useSetRecoilState(projectTasksAtom);\n  const [showMenu, setShowMenu] = useState(false);\n  const [showInput, setShowInput] = useState(false);\n\n  const selectedProject = allProjects.find(\n    (project) => project.id === projectId,\n  );\n  if (!selectedProject) {\n    history.replace('/tasks');\n  }\n  const [projectName, setProjectName] = useState(selectedProject?.projectName);\n\n  useEffect(() => {\n    setProjectName(selectedProject?.projectName);\n  }, [selectedProject?.projectName]);\n\n  async function ProjectDeleteHandler() {\n    try {\n      const res = await axios.request({\n        method: 'DELETE',\n        url: '/api/project',\n        data: { projectId },\n        timeoutErrorMessage: 'We were unable to delete todo',\n      });\n      if (res.status === 200) {\n        setAllProject((projectList) =>\n          produce(projectList, (draft) => {\n            const deleteIndex = draft.findIndex(\n              (project) => project.id === projectId,\n            );\n            if (deleteIndex > -1) {\n              draft.splice(deleteIndex, 1);\n            }\n          }),\n        );\n        setTasksAfterDeleteingProject((tasks) =>\n          produce(tasks, (draft) => {\n            return draft.filter((task) => task.projectId !== projectId);\n          }),\n        );\n        history.replace('/tasks');\n      }\n    } catch (e) {\n      addNotification(e.message, 'NetWork Error');\n    }\n  }\n\n  async function AddTodoHandler(todoTitle: string) {\n    try {\n      if (window.navigator.onLine) {\n        const res = await axios.post<todoBodyInProjectType>(\n          '/api/todo/new',\n          {\n            todoTitle,\n            projectId: projectId,\n          },\n          { timeoutErrorMessage: 'We were unable to add todo' },\n        );\n        if (res.status === 200) {\n          const newTodo = {\n            ...res.data,\n            createdAt: new Date(res.data.createdAt),\n            dueDate: undefined,\n          };\n          setTasksInProject(newTodo, 'add');\n        }\n      } else {\n        throw new Error('No internet connection');\n      }\n    } catch (e) {\n      addNotification(e.message, 'NetWork Error');\n    }\n  }\n\n  function toggleMenu() {\n    setShowMenu((show) => !show);\n  }\n\n  const outSideClickHandler = useCallback(function clickOutSideHandler() {\n    setShowMenu(false);\n  }, []);\n\n  function inputChangeHandler(val: string) {\n    setProjectName(val);\n  }\n\n  function showInputHandler() {\n    setShowInput(true);\n  }\n\n  function hideInputHandler() {\n    setShowInput(false);\n  }\n\n  return (\n    <div className={Styles.container}>\n      <header>\n        {showInput ? (\n          <ProjectTitle\n            inputValue={projectName}\n            onChangeInput={inputChangeHandler}\n            initialInputValue={selectedProject?.projectName}\n            project={selectedProject}\n            onHideInput={hideInputHandler}\n          />\n        ) : (\n          <Header\n            displayTitle={selectedProject ? selectedProject.projectName : ''}\n            onClick={showInputHandler}\n          />\n        )}\n        <span className={Styles.imgContainer} onClick={toggleMenu}>\n          <img src={dots} alt='' />\n          <ProjectMenu\n            show={showMenu}\n            onClickOutside={outSideClickHandler}\n            onClickDelete={ProjectDeleteHandler}\n          />\n        </span>\n        <AddTodo placeholder='Add a Task' onAddTodo={AddTodoHandler} />\n      </header>\n      <main>\n        {selectedProject ? <TodoList project={selectedProject} /> : null}\n        {selectedProject ? (\n          <CompletedTodoList project={selectedProject} />\n        ) : null}\n      </main>\n    </div>\n  );\n}\n\nexport default ProjectContainer;\n","import React, { useState, useEffect } from 'react';\nimport Home from './component/Home/Home';\nimport axios from 'axios';\nimport Loading from './component/Loading/Loading';\nimport { userInfo } from './utils/types';\nimport { loginState } from './selector/loginStatus';\nimport { useSetTaskOnLoad } from './utils/customHooks/useSetTaskOnload';\nimport { loginDetailsState } from './atoms/loginDetailsAtom';\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport TaskContainer from './component/TasksContainer/TaskContainer';\nimport MydayContainer from './component/MydayContainer/MydayContainer';\nimport PlannedContainer from './component/PlannedContainer/PlannedContainer';\nimport Important from './component/ImportantContainer/ImportantContainer';\nimport LeftSidebar from './component/LeftSidebar/LeftSidebar';\nimport NotificationList from './component/UI/NotificationList/NotificationList';\nimport ProjectContainer from './component/ProjectContainer/ProjectContainer';\n\nfunction App() {\n  const setUserDetails = useSetRecoilState<null | userInfo>(loginDetailsState);\n  const loggedIn = useRecoilValue(loginState);\n  const [pageStatus, setPageStatus] = useState<'success' | 'loading' | 'fail'>(\n    'loading',\n  );\n  useSetTaskOnLoad();\n  useEffect(\n    () => {\n      async function getCurrentUser() {\n        const res = await axios.get(`/api/current_user`);\n        setUserDetails(res.data || null);\n        setPageStatus('success');\n      }\n      getCurrentUser();\n    }, // eslint-disable-next-line\n    [],\n  );\n  let routes = (\n    <Switch>\n      <Route exact component={Home} path={'/'} />\n      <Redirect to={'/'} />\n    </Switch>\n  );\n  if (loggedIn) {\n    routes = (\n      <Switch>\n        <Route path={'/tasks'}>\n          <TaskContainer />\n        </Route>\n        <Route path={'/myday'}>\n          <MydayContainer />\n        </Route>\n        <Route path={'/planned'}>\n          <PlannedContainer />\n        </Route>\n        <Route path={'/important'}>\n          <Important />\n        </Route>\n        <Route path={'/project/:projectId'}>\n          <ProjectContainer />\n        </Route>\n        <Redirect to='/tasks' />\n      </Switch>\n    );\n  }\n\n  return pageStatus === 'loading' ? (\n    <Loading />\n  ) : (\n    <div className='app'>\n      {loggedIn ? <LeftSidebar /> : null}\n      {routes}\n      <NotificationList />\n    </div>\n  );\n}\n\nexport default App;\n","import { normalTasksState } from '../../atoms/NormalTaskAtom';\nimport { planbedTasksState } from '../../atoms/plannedTasksState';\nimport { myDayState } from '../../atoms/MyDayTaskAtom';\nimport { ImpTasksState } from '../../atoms/ImportantTaskAtom';\nimport { projects } from '../../atoms/allProjectAtom';\nimport { projectTasksAtom } from '../../atoms/todoInProjects';\nimport { useSetRecoilState } from 'recoil';\nimport {\n  todoBody,\n  todoType,\n  plannedTodoBodyType,\n  plannedTodoType,\n  myDayTodoType,\n  MydayTodoBodyType,\n  project,\n  todoBodyInProjectType,\n  todoInProjectType,\n} from '../types';\nimport axios from '../../axios';\nimport produce from 'immer';\nimport { useEffect } from 'react';\nimport { endOfDay } from 'date-fns';\nimport { useSetNotification } from './useAddNotification';\nimport { useRecoilValue } from 'recoil';\nimport { loginState } from '../../selector/loginStatus';\n\n/**\n * custom hooks that will fetch all the todos concurrently when you are logged in.\n */\nexport function useSetTaskOnLoad() {\n  const setNormalTasks = useSetRecoilState(normalTasksState);\n  const setPlannedTasks = useSetRecoilState(planbedTasksState);\n  const setImpTasks = useSetRecoilState(ImpTasksState);\n  const setMydayTasks = useSetRecoilState(myDayState);\n  const setProjects = useSetRecoilState(projects);\n  const setTasksInProject = useSetRecoilState(projectTasksAtom);\n  const { addNotification } = useSetNotification();\n  const loggedIn = useRecoilValue(loginState);\n  useEffect(\n    () => {\n      async function loadTasks() {\n        try {\n          if (loggedIn) {\n            if (window.navigator.onLine) {\n              const [res1, res2, res3, res4, res5, res6] =\n                await Promise.allSettled([\n                  axios.get<todoBody[]>('/api/todo/getalltask', {\n                    timeoutErrorMessage: 'We were unable to get all todo',\n                  }),\n                  axios.get<plannedTodoBodyType[]>(\n                    '/api/todo/getalltaskwithduedate',\n                    {\n                      timeoutErrorMessage:\n                        'We were unable to get all Planned todo',\n                    },\n                  ),\n                  axios.get<todoBody[]>('/api/todo/getallimptask', {\n                    timeoutErrorMessage:\n                      'We were unable to get all important todo',\n                  }),\n                  axios.get<MydayTodoBodyType[]>('/api/todo/getallmyday', {\n                    timeoutErrorMessage: 'We were unable to my Day todo',\n                  }),\n                  axios.get<project[]>('/api/project/getall', {\n                    timeoutErrorMessage: 'We were unable to my Day todo',\n                  }),\n                  axios.get<todoBodyInProjectType[]>(\n                    '/api/project/getalltask',\n                    {\n                      timeoutErrorMessage: 'We were unable to my Day todo',\n                    },\n                  ),\n                ]);\n              if (\n                res1.status === 'fulfilled' &&\n                res2.status === 'fulfilled' &&\n                res3.status === 'fulfilled' &&\n                res4.status === 'fulfilled' &&\n                res5.status === 'fulfilled' &&\n                res6.status === 'fulfilled'\n              ) {\n                if (res1.value.status === 200) {\n                  const newTodoList: todoType[] = produce(\n                    res1.value.data,\n                    (draft) => {\n                      const todoList: todoType[] = draft.map((todo) => {\n                        if (todo.dueDate) {\n                          return {\n                            ...todo,\n                            createdAt: new Date(todo.createdAt),\n                            dueDate: endOfDay(new Date(todo.dueDate)),\n                          };\n                        } else {\n                          return {\n                            ...todo,\n                            createdAt: new Date(todo.createdAt),\n                            dueDate: undefined,\n                          };\n                        }\n                      });\n                      return todoList.sort((a, b) => {\n                        return b.createdAt.getTime() - a.createdAt.getTime();\n                      });\n                    },\n                  );\n                  setNormalTasks(newTodoList);\n                }\n                if (res2.value.status === 200) {\n                  const newTodoList: plannedTodoType[] = produce(\n                    res2.value.data,\n                    (draft) => {\n                      const todoList = draft.map((todo) => {\n                        return {\n                          ...todo,\n                          createdAt: new Date(todo.createdAt),\n                          dueDate: endOfDay(new Date(todo.dueDate)),\n                        };\n                      });\n                      return todoList.sort((a, b) => {\n                        return b.createdAt.getTime() - a.createdAt.getTime();\n                      });\n                    },\n                  );\n                  setPlannedTasks(newTodoList);\n                }\n                if (res3.value.status === 200) {\n                  const newTodoList: todoType[] = produce(\n                    res3.value.data,\n                    (draft) => {\n                      const todoList: todoType[] = draft.map((todo) => {\n                        if (todo.dueDate) {\n                          return {\n                            ...todo,\n                            createdAt: new Date(todo.createdAt),\n                            dueDate: endOfDay(new Date(todo.dueDate)),\n                          };\n                        } else {\n                          return {\n                            ...todo,\n                            createdAt: new Date(todo.createdAt),\n                            dueDate: undefined,\n                          };\n                        }\n                      });\n                      return todoList.sort((a, b) => {\n                        return b.createdAt.getTime() - a.createdAt.getTime();\n                      });\n                    },\n                  );\n                  setImpTasks(newTodoList);\n                }\n                if (res4.value.status === 200) {\n                  const newTodoList: myDayTodoType[] = produce(\n                    res4.value.data,\n                    (draft) => {\n                      const todoList: myDayTodoType[] = draft.map((todo) => {\n                        if (todo.dueDate) {\n                          return {\n                            ...todo,\n                            createdAt: new Date(todo.createdAt),\n                            dueDate: endOfDay(new Date(todo.dueDate)),\n                          };\n                        } else {\n                          return {\n                            ...todo,\n                            createdAt: new Date(todo.createdAt),\n                            dueDate: undefined,\n                          };\n                        }\n                      });\n                      return todoList.sort((a, b) => {\n                        return b.createdAt.getTime() - a.createdAt.getTime();\n                      });\n                    },\n                  );\n                  setMydayTasks(newTodoList);\n                }\n                if (res5.value.status === 200) {\n                  setProjects(res5.value.data);\n                }\n                if (res6.value.status === 200) {\n                  const newTodoList: todoInProjectType[] = produce(\n                    res6.value.data,\n                    (draft) => {\n                      const todoList: todoInProjectType[] = draft.map(\n                        (todo) => {\n                          if (todo.dueDate) {\n                            return {\n                              ...todo,\n                              createdAt: new Date(todo.createdAt),\n                              dueDate: endOfDay(new Date(todo.dueDate)),\n                            };\n                          } else {\n                            return {\n                              ...todo,\n                              createdAt: new Date(todo.createdAt),\n                              dueDate: undefined,\n                            };\n                          }\n                        },\n                      );\n                      return todoList.sort((a, b) => {\n                        return b.createdAt.getTime() - a.createdAt.getTime();\n                      });\n                    },\n                  );\n                  setTasksInProject(newTodoList);\n                }\n              }\n            } else {\n              throw new Error('No internet connection');\n            }\n          }\n        } catch (e) {\n          addNotification(e.message, 'NetWork Error');\n        }\n      }\n      loadTasks();\n    }, // eslint-disable-next-line\n    [loggedIn],\n  );\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport App from './App';\nimport { RecoilRoot } from 'recoil';\nimport './index.css';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nrender(\n  <React.StrictMode>\n    <Router>\n      <RecoilRoot>\n        <App />\n      </RecoilRoot>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addProject\":\"Input_addProject__RoH4O\",\"addInput\":\"Input_addInput__3uFfV\",\"addTodoInput\":\"Input_addTodoInput__239Gq\",\"addStepInput\":\"Input_addStepInput__3c2yr\",\"stepInputText\":\"Input_stepInputText__rRi-b\",\"inputDoneText\":\"Input_inputDoneText__8XBPq\",\"todoDetailInput\":\"Input_todoDetailInput__388tv\",\"projectTitle\":\"Input_projectTitle__2BDno\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__3LiEO\",\"primary\":\"Button_primary__3Busr\",\"secondary\":\"Button_secondary__22HCV\",\"danger\":\"Button_danger__zE_FV\",\"medium\":\"Button_medium__2TaDC\",\"small\":\"Button_small__Sc7zK\",\"large\":\"Button_large__3SDe-\",\"huge\":\"Button_huge__1_gp-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"TaskItem_container__1aVlM\",\"checkboxContainer\":\"TaskItem_checkboxContainer__5QJ1R\",\"textContainer\":\"TaskItem_textContainer__oTB_M\",\"myday\":\"TaskItem_myday__3C181\",\"fromTaskOrProject\":\"TaskItem_fromTaskOrProject__3-768\",\"text\":\"TaskItem_text__hnfMx\",\"doneText\":\"TaskItem_doneText__YJTil\",\"imp\":\"TaskItem_imp__2lC50\",\"impFilled\":\"TaskItem_impFilled__3Stvf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"AddTodo_container__32Fbx\",\"containerFocused\":\"AddTodo_containerFocused__XIyPs\",\"plusContainer\":\"AddTodo_plusContainer__1xR1a\",\"plus\":\"AddTodo_plus__1ECED\",\"addButton\":\"AddTodo_addButton__ZGN4O\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"AddStep_container__JyD-c\",\"plus\":\"AddStep_plus__3DIVS\",\"input\":\"AddStep_input__3JZD5\",\"addButton\":\"AddStep_addButton__17t98\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"accordionSection\":\"Accordion_accordionSection__2sTAS\",\"accordion\":\"Accordion_accordion__2hcNL\",\"accordionTitle\":\"Accordion_accordionTitle__3uz3x\",\"icon\":\"Accordion_icon__2MrZ6\",\"rotate\":\"Accordion_rotate__440Iv\",\"accordionContent\":\"Accordion_accordionContent__y9QSI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"activeText\":\"myDayBox_activeText__2zP0o\",\"mydayContainer\":\"myDayBox_mydayContainer__3l81U\",\"mydayTextContainer\":\"myDayBox_mydayTextContainer__3f83Q\",\"buttonContainer\":\"myDayBox_buttonContainer__3K11H\",\"mydayText\":\"myDayBox_mydayText__3Nfzb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"activeText\":\"DueDate_activeText__2jlXx\",\"container\":\"DueDate_container__26UMb\",\"textContainer\":\"DueDate_textContainer__rEyW4\",\"buttonContainer\":\"DueDate_buttonContainer__3d7SY\",\"text\":\"DueDate_text__2r_BX\",\"dateContainer\":\"DueDate_dateContainer__391Vt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"TodoBox_container__1SUg0\",\"checkboxContainer\":\"TodoBox_checkboxContainer__1UgHI\",\"textContainer\":\"TodoBox_textContainer__2Ao7X\",\"input\":\"TodoBox_input__H6Pqk\",\"imp\":\"TodoBox_imp__3zdQ5\",\"impFilled\":\"TodoBox_impFilled__34tG3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Modal_container__bV1vk\",\"heading\":\"Modal_heading__2bLrw\",\"text\":\"Modal_text__VkE6n\",\"contentContainer\":\"Modal_contentContainer__-hkMr\",\"action\":\"Modal_action__3Hx9Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"due\":\"Daydisplay_due__4lJ7j\",\"overDue\":\"Daydisplay_overDue__3XIaU\",\"dueToday\":\"Daydisplay_dueToday__1vAfK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ProjectItem_container__PRvpb\",\"active\":\"ProjectItem_active__3Bv-Z\",\"img\":\"ProjectItem_img__19Ygy\",\"text\":\"ProjectItem_text__1S2Hq\",\"notification\":\"ProjectItem_notification__3FNdF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ulContainer\":\"NotificationModule_ulContainer__25Rck\",\"notifcation\":\"NotificationModule_notifcation__19J9K\",\"message\":\"NotificationModule_message__W8pvd\",\"type\":\"NotificationModule_type__3mVx4\",\"closeContainer\":\"NotificationModule_closeContainer__2oKhl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ProjectContainer_container__3vyJm\",\"imgContainer\":\"ProjectContainer_imgContainer__2ATXc\",\"projectTitle\":\"ProjectContainer_projectTitle__3YIVB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Home_container__iTeVv\",\"logo\":\"Home_logo__3Z523\",\"heading\":\"Home_heading__g6qOM\",\"banner\":\"Home_banner__4WJEv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dropdownMenu\":\"ProjectMenu_dropdownMenu__1rd2f\",\"content\":\"ProjectMenu_content__13-ql\",\"contentDanger\":\"ProjectMenu_contentDanger__106qo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Loading_container__SzQWg\",\"loader\":\"Loading_loader__14gb4\",\"spin\":\"Loading_spin__2nans\",\"logo\":\"Loading_logo__BKvb1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputCheckBox\":\"CheckBox_inputCheckBox__2EVPC\",\"checkBox\":\"CheckBox_checkBox__xlJjE\",\"smallCheckBox\":\"CheckBox_smallCheckBox__3r1ZK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"StepItem_container__4jD3P\",\"checkboxContainer\":\"StepItem_checkboxContainer__r-lHu\",\"buttonContainer\":\"StepItem_buttonContainer__1xTIk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"AddProject_container__H13X3\",\"plusContainer\":\"AddProject_plusContainer__2gilv\",\"plus\":\"AddProject_plus__VfK23\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"GoogleButton_btn__WCvkQ\",\"google\":\"GoogleButton_google__1140R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"TwitterButton_btn__16QBR\",\"twitter\":\"TwitterButton_twitter__HURCF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"TodoContainer_container__3Rj1O\",\"close\":\"TodoContainer_close__Ta2-q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"closeButton\":\"CloseButton_closeButton__2GiQ1\",\"bigButton\":\"CloseButton_bigButton__2It_-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tooltipContainer\":\"Tooltip_tooltipContainer__3TP0g\",\"arrow\":\"Tooltip_arrow__168mV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ButtonContainer_container__1PEF3\"};"],"sourceRoot":""}